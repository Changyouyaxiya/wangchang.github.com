<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WangChang's Blog]]></title>
  <link href="http://wangchang.github.com/atom.xml" rel="self"/>
  <link href="http://wangchang.github.com/"/>
  <updated>2012-11-19T13:17:03+08:00</updated>
  <id>http://wangchang.github.com/</id>
  <author>
    <name><![CDATA[Wang Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之Deploy(1)-概念]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1/"/>
    <updated>2012-11-17T13:24:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1</id>
    <content type="html"><![CDATA[<p>Paste.Deploy主要是用来载入WSGI中的Web App使用，其核心函数是loadapp(),下文中PD就指代Paste.Deploy。</p>

<blockquote><p>OS:Ubuntu12.04 2012年11月17日 第一版
主要是对官方文档的一个翻译，外加自己的一些理解
本文的Paste.Deploy使用主要是针对WSGI</p></blockquote>

<h2>1 简介及安装</h2>

<p>Paste Deployment是一种机制，通过loadapp函数和一个配置文件或者egg包来载入WSGI应用。安装很简单，如下两种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install PasteDeploy</span></code></pre></td></tr></table></div></figure>


<p>或者可以从github上进行源码安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hg clone http://bitbucket.org/ianb/pastedeploy
</span><span class='line'>$ cd pastedeploy
</span><span class='line'>$ sudo python setup.py develop</span></code></pre></td></tr></table></div></figure>


<h2>2 配置文件Config Flie</h2>

<p>一个配置文件后缀为ini，内容被分为很多段（section），PD只关心带有前缀的段，比如<code>[app:main]</code>或者<code>[filter:errors]</code>，总的来说，一个section的标识就是<code>[type:name]</code>,不是这种类型的section将会被忽略。</p>

<p>一个section的内容是以<code>键=值</code>来标示的。#是一个注释。在段的定义中，有以下几类：</p>

<ul>
<li><p>[app:main]:定义WSGI应用，main表示只有一个应用，有多个应用的话main改为应用名字</p></li>
<li><p>[server:main]:定义WSGI的一个server。</p></li>
<li><p>[composite:xxx]：表示需要将一个请求调度定向（dispatched）到多个,或者多种应用上。以下是一个简单的例子，例子中，使用了composite，通过urlmap来实现载入多应用。</p></li>
<li><p>[fliter:]：定义“过滤器”，将应用进行进一步的封装。</p></li>
<li><p>[DEFAULT]：定义一些默认变量的值。</p></li>
</ul>


<p>以下是一个例子：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:home</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(here)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="o">-</span><span class="n">app</span><span class="ss">:blog</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Authentication</span><span class="c1">#auth</span>
</span><span class='line'><span class="k">next</span> <span class="o">=</span> <span class="n">blogapp</span>
</span><span class='line'><span class="n">roles</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">htpasswd</span> <span class="o">=</span> <span class="sr">/home/me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:blogapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:BlogApp</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:wiki</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:mywiki</span><span class="o">.</span><span class="n">main</span><span class="ss">:application</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面会进行分段的讲解</p>

<h3>2.1 composite</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个composite段，表示这将会根据一些条件将web请求调度到不同的应用。<code>use = egg:Paste#urlmap</code>表示我们奖使用<code>Paste</code>egg包中<code>urlmap</code>来实现composite，这一个段(urlmap)可以算是一个通用的composite程序了。根据web请求的path的前缀进行一个到应用的映射(map)。这些被映射的程序就包括blog,home,wiki,config:cms.ini（映射到了另外一个配置文件，PD再根据这个文件进行载入）</p>

<h3>2.2 App type1</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:home</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(here)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span></code></pre></td></tr></table></div></figure>


<p>app是一个callable object，接受的参数(environ,start_response)，这是paste系统交给application的，符合WSGI规范的参数. app需要完成的任务是响应envrion中的请求，准备好响应头和消息体，然后交给start_response处理，并返回响应消息体。<code>egg:Paste#static</code>也是Paste包中的一个简单程序，它只处理静态文件。它需要一个配置文件document_root,后面的值可以是一个变量,形式为%（var）s相应的值应该在[DEFAULT]字段指明以便Paste读取。比如：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:test</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(path)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span><span class='line'><span class="o">[</span><span class="no">DEFAULT</span><span class="o">]</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="sr">/etc/</span><span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.3 fliter</h3>

<p>filter是一个callable object，其唯一参数是(app)，这是WSGI的application对象，filter需要完成的工作是将application包装成另一个application（“过滤”），并返回这个包装后的application。</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">filter</span><span class="o">-</span><span class="n">app</span><span class="ss">:blog</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Authentication</span><span class="c1">#auth</span>
</span><span class='line'><span class="k">next</span> <span class="o">=</span> <span class="n">blogapp</span>
</span><span class='line'><span class="n">roles</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">htpasswd</span> <span class="o">=</span> <span class="sr">/home/me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:blogapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:BlogApp</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[filter-app:blog]</code>fliter-app字段表明你希望对某个应用进行包装，需要包装的应用通过next指明（表明在下一个段中），这个字段的意思就是，在正式调用blogapp之前，我会调用egg:Authentication#auth进行一个用户的验证，随后才会调用blogapp进行处理。后面的[app:blogapp]则是定义了blogapp，并指明了需要的database参数。</p>

<h3>2.4 App type2</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:wiki</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:mywiki</span><span class="o">.</span><span class="n">main</span><span class="ss">:application</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个段和之前的app段定义类似，不同的是对于wiki这个应用，我们没有使用egg包，而是直接对mywiki.main这个模块中的application对象使用了call方法。python，中一切皆对象，作为WSGI app的可以是一个函数，一个类，或者一个实例，使用call的话，相应的函数，类，实例中必须实现<strong>call</strong>()方法。此类app的格式用冒号分割: <code>call(表示使用call方法):模块的完成路径名字:应用变量的完整名字</code></p>

<h2>3 基本使用</h2>

<p>PD的主要使用就是通过读取配置文件载入WSGI应用。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from paste.deploy import loadapp
</span><span class='line'>wsgi_app = loadapp('config:/path/to/config.ini')</span></code></pre></td></tr></table></div></figure>


<p>注意，这里需要指明绝对路径。</p>

<h2>4 更多关于配置文件</h2>

<h3>4.1 App</h3>

<p>单个配置文件中可以定义多个应用个，每个应用有自己独立的段。应用的定义以[app:name]的格式，[app:main]表示只有一个应用。应用的定义支持以下五种格式：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:another_config_file</span><span class="o">.</span><span class="n">ini</span><span class="c1">#app_name</span>
</span><span class='line'><span class="c1">#使用另外一个配置文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myotherapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:MyApp</span>
</span><span class='line'><span class="c1">#使用egg包中的内容</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:mythirdapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:my</span><span class="o">.</span><span class="n">project</span><span class="ss">:myapplication</span>
</span><span class='line'><span class="c1">#使用模块中的callable对象</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:mylastapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">myotherapp</span>
</span><span class='line'><span class="c1">#使用另外一个section</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myfacapp</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">myapp</span><span class="o">.</span><span class="n">modulename</span><span class="ss">:app_factory</span>
</span><span class='line'><span class="c1">#使用工厂函数</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，最后一种方式，将一个app指向了某些python代码。此模式下，必须执行app协议，以app_factory表示，后面的值需要import的东西，在这个例子中myapp.modulename被载入，并从其中取得了app_factory的实例。</p>

<p>app_factory是一个callable object，其接受的参数是一些关于application的配置信息：<code>(global_conf,**kwargs)</code>，<code>global_conf</code>是在ini文件中default section中定义的一系列key-value对，而<code>**kwargs</code>，即一些本地配置，是在ini文件中，app:xxx section中定义的一系列key-value对。app_factory返回值是一个application对象</p>

<p>在app的配置中，use参数以后配置就算结束了。其余的键值参数将会作为参数，传递到factory中，如下：</p>

<pre><code>[app:blog]
use = egg:MyBlog
database = mysql://localhost/blogdb #这是参数
blogname = This Is My Blog! #这是参数
</code></pre>

<h3>4.2 全局配置</h3>

<p>全局配置主要是用于多个应用共用一些变量，这些变量我们规定放在段[DEFAULT]中，如果需要覆盖，可以在自己的app中重新定义，如下：</p>

<pre><code>[DEFAULT]
admin_email = webmaster@example.com
[app:main]
use = ...
set admin_email = bob@example.com
</code></pre>

<h3>4.3 composite app</h3>

<p>composite是一个运行着像是app，但是实际上是由多个应用组成的。urlmap就是composite app的一个例子，url不同的path对应了不同的应用。如下：</p>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = mainapp
/files = staticapp

[app:mainapp]
use = egg:MyApp

[app:staticapp]
use = egg:Paste#static
document_root = /path/to/docroot
</code></pre>

<p>在loadapp函数的执行中，composite app被实例化，它同时还会访问配置文件中定义的其他应用。</p>

<h3>4.4 app定义高级用法</h3>

<p>在app段中，你可以定义fliters和servers，通过<code>fliter:</code>和<code>server:</code> PD通过loadserver和loadfilter函数进行调用，工作机制都一样，返回不同的对象。</p>

<h4>4.4.1 filter composition</h4>

<p>应用filter的方式很多，重要的是看你filter的数量和组织形式。下面会一一介绍应用fliter的几种方式：</p>

<p>1.使用<code>filter-with</code></p>

<pre><code>[app:main]
use = egg:MyEgg
filter-with = printdebug

[filter:printdebug]
use = egg:Paste#printdebug
# and you could have another filter-with here, and so on...
</code></pre>

<p>2.使用<code>fliter-app</code></p>

<pre><code>[fliter-app:printdebug]
use = egg:Paste
next = main

[app:main]
use = egg:MyEgg
</code></pre>

<p>3.使用pipeline</p>

<p>当使用多个filter的时候需要使用pipeline的方式，它需要提供一个key参数pipeline,后面的值是一个列表，最后以应用结尾。如下：</p>

<pre><code>[pipeline:main]
pipeline = filter1 egg:FilterEgg#filter2 filter3 app

[filter:filter1]
...
</code></pre>

<p>假设在ini文件中, 某条pipeline的顺序是filter1, filter2, filter3，app, 那么，最终运行的app_real是这样组织的：
app_real = filter1(filter2(filter3(app)))</p>

<p>在app真正被调用的过程中，filter1._<em>call_</em>(environ,start_response)被首先调用，若某种检查未通过，filter1做出反应；否则交给filter2._<em>call_</em>(environ,start_response)进一步处理，若某种检查未通过，filter2做出反应，中断链条，否则交给filter3._<em>call_</em>(environ,start_response)处理，若filter3的某种检查都通过了，最后交给app._<em>call_</em>(environ,start_response)进行处理。</p>

<h3>4.5 读取配置文件</h3>

<p>如果希望在不创建应用的情况下得到配置文件，可以使用appconfig(uri)函数，将会以字典形式返回使用的配置。这个字典包括了全局很本地的配置信息，所以可以通过属性方法获得相应的attributes （.local_conf and .global_conf）</p>

<h2>5 其他</h2>

<h3>5.1 如何引用Egg包</h3>

<p>egg是python的一个包，pip easy_install等都是安装egg包的方式。关注egg包要注意：
+某一egg包是有标准说明的</p>

<p>python setup.py name
+有entry point，不用太在意，这个只是说明调用程序的参数。</p>

<h3>5.2 定义factory函数</h3>

<p>工厂函数的定义还是遵循之前提到的应用的协议。目前，用于工厂函数的协议有以下：</p>

<p>*paste.app_factory</p>

<p>*paste.composite_factory</p>

<p>*paste.filter_factory</p>

<p>*paste.server_factory</p>

<p>所有的这些都希望有一个含有__call__方法的（函数，方法，类）。</p>

<p>1.<code>paste.app_factory</code></p>

<pre><code>def app_factory(global_config, **local_conf):
    return wsgi_app
</code></pre>

<p>global_config是一个字典，而local_conf则是关键字参数。返回一个wsgi_app（含有<strong>call</strong>方法。）</p>

<p>2.paste.composite_factory`</p>

<pre><code>def composite_factory(loader, global_config, **local_conf):
   return wsgi_app
</code></pre>

<p>loader是一个对象，有几个有趣的方法,get_app(name_or_uri, global_conf=None)根据name返回一个wsgi应用，get_filter（）和get_server（）也是一样。看一个更加复杂的例子，举例一个pipeline应用：</p>

<pre><code>def pipeline_factory(loader, global_config, pipeline):
    # space-separated list of filter and app names:
    pipeline = pipeline.split()
    filters = [loader.get_filter(n) for n in pipeline[:-1]]
    app = loader.get_app(pipeline[-1])
    filters.reverse() # apply in reverse order!
    for filter in filters:
      app = filter(app)
    return app
</code></pre>

<p>相应的配置文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[composite:main]
</span><span class='line'>use = &lt;pipeline_factory_uri>
</span><span class='line'>pipeline = egg:Paste#printdebug session myapp
</span><span class='line'>
</span><span class='line'>[filter:session]
</span><span class='line'>use = egg:Paste#session
</span><span class='line'>store = memory
</span><span class='line'>
</span><span class='line'>[app:myapp]
</span><span class='line'>use = egg:MyApp</span></code></pre></td></tr></table></div></figure>


<p>3.<code>paste.filter_factory</code>
fliter的工厂函数和app的共产函数类似，除了它返回的是一个filter,fliter是一个仅仅把一个wsgi应用作为唯一参数的callable对象，返回一个被filter了的应用。
以下是一个例子，这个filter会检查CGI中REMOTE_USER变量是否存在，并创建一个简单的认证过滤器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def auth_filter_factory(global_conf, req_usernames):
</span><span class='line'>    # space-separated list of usernames:
</span><span class='line'>    req_usernames = req_usernames.split()
</span><span class='line'>    def filter(app):
</span><span class='line'>        return AuthFilter(app, req_usernames)
</span><span class='line'>    return filter
</span><span class='line'>
</span><span class='line'>class AuthFilter(object):
</span><span class='line'>    def __init__(self, app, req_usernames):
</span><span class='line'>        self.app = app
</span><span class='line'>        self.req_usernames = req_usernames
</span><span class='line'>
</span><span class='line'>    def __call__(self, environ, start_response):
</span><span class='line'>        if environ.get('REMOTE_USER') in self.req_usernames:
</span><span class='line'>            return self.app(environ, start_response)
</span><span class='line'>        start_response(
</span><span class='line'>            '403 Forbidden', [('Content-type', 'text/html')])
</span><span class='line'>        return ['You are forbidden to view this resource']</span></code></pre></td></tr></table></div></figure>


<p>4.<code>paste.filter_app_factory</code>
和paste.filter_factory类似，接受一个wsgi应用参数，返回一个WSGI应用，所以如果改变以上代码的：</p>

<pre><code>class AuthFilter(object):
    def __init__(self, app, global_conf, req_usernames):
        ....
</code></pre>

<p>那么，类 AuthFilter就会作为一个filter_app_factory函数使用。</p>

<p>5.<code>paste.server_factory</code></p>

<p>与以上不同的是，函数返回的是一个server,一个server也是一个callable对象，以一个WSGI应用作为参数，而后为这个应用服务。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">server_factory</span><span class="p">(</span><span class="n">global_conf</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">serve</span><span class="p">(</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">Server</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">serve</span>
</span></code></pre></td></tr></table></div></figure>


<p>Server的实现用户可以自定义，可以参考python包wsgiref</p>

<p>6.<code>paste.server_runner</code>
与 paste.server_factory类似，不同的是参数格式。</p>

<h2>6 其他一些值得讨论的问题</h2>

<p>ConfigParser（PD底层用到这个来解析ini文件）解析ini文件不是很有效率，是否需要更改？</p>

<p>在配置文件中的对象是否需要是python风格的，而不是字符串的形式？</p>

<blockquote><p>Paste Deployment currently does not require other parts of Paste, and is distributed as a separate package.</p></blockquote>

<p><a href="http://pythonpaste.org/deploy/#defining-factories">http://pythonpaste.org/deploy/#defining-factories</a>
<a href="http://pythonpaste.org/deploy/">http://pythonpaste.org/deploy/</a>
<a href="http://pythonpaste.org/script/#paster-serve">http://pythonpaste.org/script/#paster-serve</a>
<a href="http://kevinzheng.sinaapp.com/?p=104">http://kevinzheng.sinaapp.com/?p=104</a>
<a href="http://blog.csdn.net/icycolawater/article/details/7045287">http://blog.csdn.net/icycolawater/article/details/7045287</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Sqlalchemy指南(一)]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1/"/>
    <updated>2012-11-14T15:11:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1</id>
    <content type="html"><![CDATA[<p>最近项目需要学习sqlalchemy，对于这个神器，网上的教程实在太少了，而且版本太老。于是只好自己慢慢读，以此系列做一个记录的吧！</p>

<blockquote><p>Sqlalchemy version:0.8.b1
使用sqlite或者mysql来练习
主要是参照官方文档，以及实际的使用经验
OS:Win7 or Ubuntu12.04</p></blockquote>

<!--more-->


<h2>Sqlalchemy的架构图</h2>

<p>关于这个架构图，文档解释如下：</p>

<blockquote><p>InSQLAlchemy ORM, the Object Relational Mapper is introduced and fully described. New users should begin with theObject Relational Tutorial.</p>

<p>InSQLAlchemy Core, the breadth of SQLAlchemy’s SQL and database integration and description services are doc-umented, the core of which is the SQL Expression language. The SQL Expression Language is a toolkit all its own, independent of the ORM package, which can be used to construct manipulable SQL expressions which can be programmatically constructed, modified, and executed, returning cursor-like result sets.</p></blockquote>

<h2>环境准备</h2>

<p>pip install 或者 &#8216;easy install&#8217;都可以</p>

<h1>#</h1>

<p>和数据库连接，需要一个engine！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from sqlalchemy import create_engine
</span><span class='line'>engine = create_engine(’sqlite:///:memory:’, echo=True)</span></code></pre></td></tr></table></div></figure>


<p>引擎的方法：
engine.execute(&#8220;select 1&#8221;).scalar() 直接执行sql语句。
在使用ORM中，应该有两步，一是描述我们要处理的数据库，而是将我们的类和数据库中的table关联起来。在sqlalchemy中，这两步合二为一，使用declarative机制，在这个机制中，所有需要映射的类都是根据一个维护分类和映射关系的基类来的，这个基类就是declarative base class。</p>

<p>from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base() #创建这个base类</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu12.04下关闭触摸板]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/close-touchpad-in-ubuntu12-dot-04s/"/>
    <updated>2012-11-02T10:24:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/close-touchpad-in-ubuntu12-dot-04s</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo modprobe -r psmouse</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中文章信息头的最好形式]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/best-format-for-octopress-article/"/>
    <updated>2012-10-21T13:36:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/best-format-for-octopress-article</id>
    <content type="html"><![CDATA[<p>主要记录一下octopres中编辑文章头信息最好的格式。</p>

<blockquote><p>OS:Ubuntu12.04 2012年10月21日 第一版</p></blockquote>

<figure class='code'><figcaption><span>best format - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">layout</span><span class="p">:</span> <span class="n">post</span>
</span><span class='line'><span class="n">title</span><span class="p">:</span> <span class="s2">&quot;SEO for Octopress&quot;</span>  <span class="c1">#文章标题</span>
</span><span class='line'><span class="n">date</span><span class="p">:</span> <span class="mi">2012</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">22</span> <span class="mi">09</span><span class="p">:</span><span class="mi">55</span>  <span class="c1">#写作时间</span>
</span><span class='line'><span class="n">comments</span><span class="p">:</span> <span class="kp">true</span> <span class="c1">#允许评论</span>
</span><span class='line'><span class="n">categories</span><span class="p">:</span> <span class="o">[</span><span class="n">seo</span><span class="p">,</span><span class="n">octopress</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#多个分类标记</span>
</span><span class='line'><span class="n">tags</span><span class="p">:</span> <span class="o">[</span><span class="n">key1</span><span class="p">,</span><span class="n">key2</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#支持多个tag的功能</span>
</span><span class='line'><span class="n">keywords</span><span class="p">:</span> <span class="n">seo</span><span class="p">,</span><span class="n">octopress</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="c1">#关键字</span>
</span><span class='line'><span class="n">description</span><span class="p">:</span> <span class="err">“</span><span class="no">How</span> <span class="n">to</span> <span class="n">optimize</span> <span class="no">Octopress</span> <span class="k">for</span> <span class="no">SEO</span><span class="p">,</span><span class="no">Heroku</span><span class="err">”</span> <span class="c1">#文章描述，用于搜索引擎显示的内容</span>
</span><span class='line'><span class="o">---</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>其中，catagoies有两种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>categories: [cate1,cate2,...]
</span><span class='line'>
</span><span class='line'>categories:
</span><span class='line'>- cate1
</span><span class='line'>- cate2
</span><span class='line'>- ...</span></code></pre></td></tr></table></div></figure>


<p>tags的也有如上两种方式，<em>至于keywords项的作用，还暂时不知道</em>,但是按照我目前的想法，categories支持多个以后，和tags的功能的功能重合了，所以tags可以不要，倒是这个description相比较重要，有利于SEO，关于SEO可以参考：</p>

<blockquote><p><a href="http://zyzhang.github.com/blog/2012/09/03/blog-with-github-pages-and-jekyll-seo/">Github Pages + Jekyll搭建博客之SEO</a></p>

<p><a href="http://www.yatishmehta.in/seo-for-octopress">SEO for Octopress,Heroku</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[add tags for octopress]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/add-tags-for-octopress/"/>
    <updated>2012-10-21T13:27:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/add-tags-for-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在用Github搭建的Octopress博客中安装百度统计]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/install-baidu-analytics-on-octopress-which-based-on-github-pages/"/>
    <updated>2012-10-15T20:38:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/install-baidu-analytics-on-octopress-which-based-on-github-pages</id>
    <content type="html"><![CDATA[<p>我发现用Github搭建的octopress有个缺点就是貌似不怎么容易被搜索引擎检索到,这个先不管了,以后再折腾.这里主要记录一下如何在octopress中安装百度统计.因为百度统计不是octopress默认支持的,不像Google分析那样直接改了配置就能用,所以需要手动安装.</p>

<blockquote><p>OS:Ubuntu 12.04 2012年10月15日 第一版</p></blockquote>

<!--more-->


<h2>进入百度统计,添加站点,获取站点代码.</h2>

<p>主要是一段javascript的代码,在有访问时通过这段代码将信息发送给百度统计的分析端.我的代码如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_bdhmProtocol</span> <span class="o">=</span> <span class="p">((</span><span class="s2">&quot;https:&quot;</span> <span class="o">==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="p">)</span> <span class="o">?</span> <span class="s2">&quot; https://&quot;</span> <span class="o">:</span> <span class="s2">&quot; http://&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%3Cscript src=&#39;&quot;</span> <span class="o">+</span> <span class="nx">_bdhmProtocol</span> <span class="o">+</span> <span class="s2">&quot;hm.baidu.com/h.js%3F3e617f2de1bb9051b3b53a2ac839280c&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加代码到Octopres</h2>

<p>因为Octopress不是纯html,用了CSS,所以在<code>source/index.html</code>中没有Body段,整个界面大致分为header,navgiation,body,footer四个部分,所以我们把代码放在footber里面合适一点.进入<code>source/_includes</code>目录,新建文件<code>baidu_analytics.html</code>,在其中复制之前得到的统计代码.</p>

<p>随后更改<code>source/_includes</code>下的<code>after_footer.html</code>文件,增加一行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% include baidu_analytics.html %\} ##去掉反斜线\</span></code></pre></td></tr></table></div></figure>


<h2>测试</h2>

<p>这里已经安装完成,进入<a href="http://tongji.baidu.com">百度统计后台</a>进行代码安装检查,检测到代码安装成功就OK了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve octopress theme]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/improve-octopress-theme/"/>
    <updated>2012-10-15T19:08:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/improve-octopress-theme</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中的写作效果]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/octopress-and-markdown-style/"/>
    <updated>2012-10-15T13:29:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/octopress-and-markdown-style</id>
    <content type="html"><![CDATA[<p>关于如何在octopress中使用插件或者markdown语法营造出特定的代码效果,我折腾了好久,网上大多没有比较基础易懂的教程,所以今天对于markdown语法和octopress的写作效果做一个总结,方便以后查找.这其中也包含了对octopress首页中写作插件的翻译.</p>

<blockquote><p>About: OS:Win 7 2012年10月15日，第一版。</p></blockquote>

<!--more-->


<h3>首页文章不全部显示,而显示Read On</h3>

<p>在文章中合适的地方加入<code>&lt;!--more--&gt;</code>就可以了.</p>

<h3>给文字加上方块</h3>

<p>示例效果:<code>这是一个示例效果</code></p>

<p>只需要在`这里是你的文字`中加入你的文字就可以了.(用键盘ESC键下面的键包裹文字)</p>

<h3>引用块</h3>

<p>示例效果:</p>

<blockquote><p>这是一个引用块</p></blockquote>

<p>有两种实现方式:一个利用markdown自带语法:<code>&gt;号后面紧跟你的文字</code>.一种是利用插件代码(去掉下面的反斜线\).</p>

<pre><code>{\% blockquote %\}

这里是你的引用文字

{\% endblockquote %\}
</code></pre>

<h3>插入代码</h3>

<p>示例效果:</p>

<pre><code>这里是代码插入示例
</code></pre>

<p>也是两种实现方式,一是利用markdown,方法是空出一行,四个空格,再加代码内容,如下:</p>

<pre><code>这里空出一行
四个空格后跟代码块
这里再空出一行
</code></pre>

<p>第二个方式是利用octopress的插件实现代码插入,功能更加全面(去掉以下的反斜线\).</p>

<pre><code>{\% codeblock %\}

这里是你的代码

{\% endcodeblock %\}
</code></pre>

<h3>插入图片</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7下Vim设置Python开发环境]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev/"/>
    <updated>2012-10-11T19:52:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev</id>
    <content type="html"><![CDATA[<p>最近用python写代码，条件有限，懒得用eclipse，遂用vim来做。网上搜了下vim支持python开发的方法，一步一步的来有点麻烦，想起以前有个脚本，稍加修改就OK了，在此与大家分享，功能上不只是支持python,常用的都支持，支持taglist以及minibuffer外加nerdtree（树形显示目录），应该说相当完善了，整个过程差不多10分钟搞定。</p>

<!--more-->


<blockquote><p>About:
OS:Win 7
2012年10月11日，第一版。</p></blockquote>

<h2>下载Vim7</h2>

<p>前往<a href="http://www.vim.org/" title="Vim下载">Vim下载</a>下载最新的Vim7.</p>

<h2>下载IDE脚本</h2>

<p>前往<a href="http://code.google.com/p/vimide/">Vim-IDE</a>下载vimide for windows，按照里面操作执行，只是简单的复制过程。</p>

<h2>更新Vim安装目录下的_vimrc文件</h2>

<figure class='code'><figcaption><span>_vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;设置文件编码</span>
</span><span class='line'><span class="s2">set fileencodings=utf-8,cp936,ucs-bom,gbk </span>
</span><span class='line'><span class="s2">set helplang=cn</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="no">ColorScheme</span><span class="err">设置色彩主题</span>
</span><span class='line'><span class="n">colorscheme</span> <span class="n">desert</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="n">shiftwidth</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">set</span> <span class="n">tabstop</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">set</span> <span class="n">expandtab</span>
</span><span class='line'><span class="n">set</span> <span class="n">nobackup</span>
</span><span class='line'><span class="n">set</span> <span class="n">noswapfile</span>
</span><span class='line'><span class="n">set</span> <span class="n">nowb</span>
</span><span class='line'><span class="n">set</span> <span class="n">backspace</span><span class="o">=</span><span class="n">start</span><span class="p">,</span><span class="n">indent</span><span class="p">,</span><span class="n">eol</span>
</span><span class='line'><span class="n">set</span> <span class="n">nu</span>
</span><span class='line'><span class="n">set</span> <span class="n">autoindent</span>
</span><span class='line'><span class="n">set</span> <span class="n">smartindent</span>
</span><span class='line'><span class="n">set</span> <span class="n">wrap</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;设置鼠标</span>
</span><span class='line'><span class="s2">set mouse=a</span>
</span><span class='line'>
</span><span class='line'><span class="s2">set noerrorbells</span>
</span><span class='line'><span class="s2">set novisualbell</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">语法高亮</span>
</span><span class='line'><span class="n">syntax</span> <span class="n">on</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;设置自动补全</span>
</span><span class='line'><span class="s2">filetype plugin on</span>
</span><span class='line'><span class="s2">filetype indent on</span>
</span><span class='line'><span class="s2">set completeopt=longest,menu</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">自动补全命令时候使用菜单式匹配列表</span>
</span><span class='line'><span class="n">set</span> <span class="n">wildmenu</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">ruby</span><span class="p">,</span><span class="n">eruby</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">rubycomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">python</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">pythoncomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">javascript</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javascriptcomplete</span><span class="c1">#CompleteJS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">html</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">htmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">css</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">csscomplete</span><span class="c1">#CompleteCSS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">xml</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">xmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">java</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javacomplete</span><span class="c1">#Complet</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;NERDTree可以树形显示目录,Taglist显示Tags列表</span>
</span><span class='line'><span class="s2">&quot;</span><span class="no">Ctrl</span><span class="o">+</span><span class="n">w</span><span class="err">：打开文件浏览</span> <span class="no">Ctrl</span><span class="o">+</span><span class="n">t</span><span class="err">：打开</span><span class="no">Taglist</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span> <span class="ss">:NERDTree</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">t</span><span class="o">&gt;</span> <span class="ss">:TlistToggle</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">vmap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">c</span><span class="o">&gt;</span> <span class="s2">&quot;+y</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let Tlist_Ctags_Cmd=&#39;ctags.exe&#39;</span>
</span><span class='line'><span class="s2">let Tlist_Show_One_File = 1</span>
</span><span class='line'><span class="s2">let Tlist_Exit_OnlyWindow=1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">存放</span><span class="n">tags</span><span class="err">的目录，</span><span class="n">ctags</span> <span class="o">-</span><span class="n">R</span><span class="err">后生成的</span><span class="n">tags</span><span class="err">所在目录</span>
</span><span class='line'><span class="n">set</span> <span class="n">tags</span><span class="o">=</span><span class="n">C</span><span class="p">:\</span><span class="no">Users</span><span class="p">\</span><span class="n">lusky</span><span class="p">\</span><span class="n">quantum</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapWindowNavVim</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapWindowNavArrows</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapCTabSwitchBufs</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplModSelTarget</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PHP支持,不需要的话可以不要</span>
</span><span class='line'><span class="s2">inoremap &lt;C-P&gt; &lt;ESC&gt;:call PhpDocSingle()&lt;CR&gt;i </span>
</span><span class='line'><span class="s2">nnoremap &lt;C-P&gt; :call PhpDocSingle()&lt;CR&gt; </span>
</span><span class='line'><span class="s2">vnoremap &lt;C-P&gt; :call PhpDocRange()&lt;CR&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<h2>下载更适合Python的自动补全插件</h2>

<p>下载pydiction，解压后有4个文件，拷贝python_pydiction.vim和complete-dict到ftplugin目录，修改_vimrc</p>

<figure class='code'><figcaption><span>_vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;Pydiction插件设置</span>
</span><span class='line'><span class="s2">let g:pydiction_location = &#39;D:\Program Files\Vim</span><span class="se">\v</span><span class="s2">im73</span><span class="se">\f</span><span class="s2">tplugin\complete-dict&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最后,给一张图吧:</h2>

<p><img src="http://wangchang.github.com/images/2012-10/2012-10-11-setup-vim-for-python.jpg"></p>

<p>也可以到我的github博客的source分支上下载。位于<code>blog/attachments/2012-10/_vimrc</code>下载.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu 12.04下用Github安装和维护Octopress]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/install-and-maintain-octopress-in-ubuntu-12-dot-04/"/>
    <updated>2012-10-08T20:45:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/install-and-maintain-octopress-in-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>其实之前用Github+Octopress架设博客用的是Win7,但是始终解决不了中文问题,今天换回Ubuntu,顺利解决,这里就干脆用Ubtuntu来做一个记录吧.</p>

<h2>1 安装Ruby环境</h2>

<p>利用RVM安装ruby,RVM管理Ruby的话感觉更爽一点,自己也懒得编译了.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:apt-get install curl git
</span><span class='line'>root@Node1:curl -L get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>根据RVM的要求,还需要将用户加入组以及更新配置.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:gpasswd -a root rvm
</span><span class='line'>root@Node1:source /etc/profile.d/rvm.sh</span></code></pre></td></tr></table></div></figure>


<p>安装编译依赖以及Ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g
</span><span class='line'>zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf
</span><span class='line'>root@Node1:rvm install 1.9.2</span></code></pre></td></tr></table></div></figure>


<p>OK,环境安装完成.</p>

<h2>2 安装Octopress以及组件</h2>

<p>先通过git克隆octopress的代码.再安装相应的组件.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>然后安装默认主题:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>3 设置Github</h2>

<p>这一步是以后维护的关键主要有以下步骤:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages 设置于github的关联
</span><span class='line'>rake generate 生成静态页面
</span><span class='line'>rake deploy 向github发送页面</span></code></pre></td></tr></table></div></figure>


<p>注意,所有的操作都应该是在octopress的源码中进行,rake deploy只是将生成的静态页面发送到github的master分支.,所以最后我们需要将源码保存为source分支.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'commit message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>以后维护的时候记得需要先checkout到source分支才行.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Blog Starts]]></title>
    <link href="http://wangchang.github.com/blog/2012/09/my-new-blog-starts/"/>
    <updated>2012-09-29T01:46:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/09/my-new-blog-starts</id>
    <content type="html"><![CDATA[<p>this is my new blog.i will try some functions:</p>

<p>this is code block</p>

<figure class='code'><figcaption><span>This is code block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>


<p><img src="http://placekitten.com/890/280">
<img src="http://wangchang.github.com/images/2012-09-29-my-new-blog-starts-1.jpg"></p>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>




<!--more-->



]]></content>
  </entry>
  
</feed>
