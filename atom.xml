<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WangChang's Blog]]></title>
  <link href="http://wangchang.github.com/atom.xml" rel="self"/>
  <link href="http://wangchang.github.com/"/>
  <updated>2012-12-11T14:13:18+08:00</updated>
  <id>http://wangchang.github.com/</id>
  <author>
    <name><![CDATA[Wang Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python routes 3 to WSGI framework]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-routes-3-to-wsgi-framework/"/>
    <updated>2012-11-29T19:37:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-routes-3-to-wsgi-framework</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python routes 2 RESTful services]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-routes-2-restful-services/"/>
    <updated>2012-11-29T18:37:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-routes-2-restful-services</id>
    <content type="html"><![CDATA[<p>这一节主要讲讲用Routes来配置RESTful web services。<code>map.resource</code>可以根据Atom publishing protocol协议来创建一个<code>创建/修改/删除</code>的routes。也就是说根据resource来配置routes。</p>

<!--more-->


<h2>Resource</h2>

<p>一个resource route定义了一个collection中的成员member，以及一个collection自身。一般来说，一个collection就是一个复数单词，一个member就是相应的一个单数词，举例：</p>

<p>在restful服务中，我定义了关于虚拟连接VC的一些API。那么
* resoure:vc,vcs
* collection:vcs
* member:vc
再看看一个复杂点的例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">map</span> <span class="o">=</span> <span class="n">Mapper</span><span class="p">()</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="s">&quot;messages&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The above command sets up several routes as if you had typed the</span>
</span><span class='line'><span class="c"># following commands:</span>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="s">&quot;/messages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;create&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;POST&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="s">&quot;/messages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;formatted_messages&quot;</span><span class="p">,</span> <span class="s">&quot;/messages.{format}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;new_message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/new&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;new&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;formatted_new_message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/new.{format}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;new&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;/messages/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;update&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;PUT&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;/messages/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;delete&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;DELETE&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;edit_message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/{id}/edit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;edit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;formatted_edit_message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/{id}.{format}/edit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;edit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;show&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;formatted_message&quot;</span><span class="p">,</span> <span class="s">&quot;/messages/{id}.{format}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">=</span><span class="s">&quot;messages&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;show&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到这里，我们可以推断出这么几个名词的定义：
* <strong>controller:就是一个WSGI的应用
* </strong>resource(s):就是REST API中的名词
* <strong>method:就是HTTP的方法，GET POST等
* </strong>action:Routes中与method对应，比如GET就对应&#8221;index&#8221;动作
* __collection:等同于resources。</p>

<p>上面的代码建立了如下的转换关系：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">GET</span>    <span class="sr">/messages        =&gt; messages.index()    =&gt; url(&quot;messages&quot;)</span>
</span><span class='line'><span class="sr">POST   /mess</span><span class="n">ages</span>        <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>   <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;messages&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>    <span class="sr">/messages/ne</span><span class="n">w</span>    <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>      <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;new_message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">PUT</span>    <span class="sr">/messages/</span><span class="mi">1</span>      <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">DELETE</span> <span class="sr">/messages/</span><span class="mi">1</span>      <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>    <span class="sr">/messages/</span><span class="mi">1</span>      <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>   <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>    <span class="sr">/messages/</span><span class="mi">1</span><span class="o">/</span><span class="n">edit</span> <span class="o">=&gt;</span> <span class="n">messages</span><span class="o">.</span><span class="n">edit</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>   <span class="o">=&gt;</span> <span class="n">url</span><span class="p">(</span><span class="s2">&quot;edit_message&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们很明显的看到，这个<code>messages</code>就是一个WSGI应用，准确的来说，在代码中就是一个类的实例。</p>

<p>官网上有这么个解释，我就不翻译了：</p>

<blockquote><p>Thus, you GET the collection to see an index of links to members (“index” method). You GET a member to see it (“show”). You GET “COLLECTION/new” to obtain a new message form (“new”), which you POST to the collection (“create”). You GET “MEMBER/edit” to obtain an edit for (“edit”), which you PUT to the member (“update”). You DELETE the member to delete it. Note that there are only four route names because multiple actions are doubled up on the same URLs.</p></blockquote>

<h2>Resource选项。</h2>

<p>之前我们有<code>map.resource("message", "messages")</code>来增加了一个resource资源。可以增加一些参数。如下：
* <strong>controller
使用指定的controller，否则routes根据collection的名字来决定controller的名字。
* </strong>collection
为某以collection添加URL支持，如下：</p>

<pre><code>map.resource("message", "messages", collection={"rss": "GET"})
# "GET /message/rss"  =&gt;  ``Messages.rss()``.
# Defines a named route "rss_messages".自动定义
</code></pre>

<ul>
<li><p>__member
为一个member添加URL支持，如下：</p>

<p>  map.resource(&#8216;message&#8217;, &#8216;messages&#8217;, member={&#8216;mark&#8217;:&#8217;POST&#8217;})
  # &#8220;POST /message/1/mark&#8221;  =>  <code>Messages.mark(1)</code>
  # also adds named route &#8220;mark_message&#8221;</p></li>
<li><p>__new
为新成员加入URL支持，如下：</p>

<p>  map.resource(&#8220;message&#8221;, &#8220;messages&#8221;, new={&#8220;preview&#8221;: &#8220;POST&#8221;})
  # &#8220;POST /messages/new/preview&#8221;</p></li>
<li><p>__path_prefix</p></li>
<li><p>__name_prefix</p>

<p>  map.resource(&#8220;message&#8221;, &#8220;messages&#8221;, controller=&#8221;categories&#8221;,</p>

<pre><code> path_prefix="/category/{category_id}",
 name_prefix="category_")
</code></pre>

<p>  # GET /category/7/message/1
  # Adds named route &#8220;category_message&#8221;</p></li>
<li><p>__parenet_resource
一个包含父类资源的字典，用于创建嵌套（嵌入式）的资源。需要包含父类资源的member_name和collection_name，这个字典可以在请求的时候通过<code>request.environ["routes.route"]</code>访问。</p></li>
</ul>


<p>后面不是很懂了。。。
If parent_resource is supplied and path_prefix isn’t, path_prefix will be generated from parent_resource as “<parent collection name>/:<parent member name>_id”.</p>

<p>If parent_resource is supplied and name_prefix isn’t, name_prefix will be generated from parent_resource as “<parent member name>_”.
{}</p>

<blockquote><blockquote><blockquote><p>m = Mapper()
m.resource(&#8216;location&#8217;, &#8216;locations&#8217;,
&#8230;            parent_resource=dict(member_name=&#8217;region&#8217;,
&#8230;                                 collection_name=&#8217;regions&#8217;))</p>

<h1>path_prefix is &#8220;regions/:region_id&#8221;</h1>

<h1>name prefix is &#8220;region_&#8221;</h1>

<p>url(&#8216;region_locations&#8217;, region_id=13)
&#8216;/regions/13/locations&#8217;
url(&#8216;region_new_location&#8217;, region_id=13)
&#8216;/regions/13/locations/new&#8217;
url(&#8216;region_location&#8217;, region_id=13, id=60)
&#8216;/regions/13/locations/60&#8217;
url(&#8216;region_edit_location&#8217;, region_id=13, id=60)
&#8216;/regions/13/locations/60/edit&#8217;</p></blockquote></blockquote></blockquote>

<p>Overriding generated path_prefix:</p>

<blockquote><blockquote><blockquote><p>m = Mapper()
m.resource(&#8216;location&#8217;, &#8216;locations&#8217;,
&#8230;            parent_resource=dict(member_name=&#8217;region&#8217;,
&#8230;                                 collection_name=&#8217;regions&#8217;),
&#8230;            path_prefix=&#8217;areas/:area_id&#8217;)</p>

<h1>name prefix is &#8220;region_&#8221;</h1>

<p>url(&#8216;region_locations&#8217;, area_id=51)
&#8216;/areas/51/locations&#8217;</p></blockquote></blockquote></blockquote>

<p>Overriding generated name_prefix:</p>

<blockquote><blockquote><blockquote><p>m = Mapper()
m.resource(&#8216;location&#8217;, &#8216;locations&#8217;,
&#8230;            parent_resource=dict(member_name=&#8217;region&#8217;,
&#8230;                                 collection_name=&#8217;regions&#8217;),
&#8230;            name_prefix=&#8221;)</p>

<h1>path_prefix is &#8220;regions/:region_id&#8221;</h1>

<p>url(&#8216;locations&#8217;, region_id=51)
&#8216;/regions/51/locations&#8217;
{}</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python.Routes指南1 ]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-routes-1-introduction/"/>
    <updated>2012-11-29T16:08:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-routes-1-introduction</id>
    <content type="html"><![CDATA[<h2>什么是Routes</h2>

<p>用python重新实现的Rails Routes System，主要用来将URL映射到不同的应用动作（application actions）。特别适合于RESTFUL API。</p>

<p>Routes支持基于domain, cookies, HTTP method, 自定义function的映射。目前支持的功能：</p>

<p>Sophisticated route lookup and URL generation
Named routes
Redirect routes
Wildcard paths before and after static parts
Sub-domain support built-in
Conditional matching based on domain, cookies, HTTP method (RESTful), and more
Easily extensible utilizing custom condition functions and route generation functions
Extensive unit tests</p>

<p>安装：</p>

<pre><code>easy_install Routes
pip install Routes
</code></pre>

<h2>1 基本概念</h2>

<h3>component组件</h3>

<p>一个URL中的一个个组成部分，例如/blog/2012就有两个component:blog,2012</p>

<h3>generation</h3>

<p>基于route的名字或者变量的值创建一个URL，这个是match的反过程。</p>

<h3>mapper</h3>

<p>routes的容器，一般一个应用一个mapper，一个mapper知道如何去匹配routes或者产生routes.</p>

<h3>minimization</h3>

<p>允许短URL进行长路劲的匹配，已废弃。</p>

<h3>routes</h3>

<p>一个规则，将一个URL映射成为一个routing variables的字典，比如，规则是“/{controller}/{action}”，请求的URL是“/help/about”，那么结果字典就是：</p>

<pre><code>{"controller": "help", "action": "about"}
</code></pre>

<p>routes并不知道这些变量的含义，它只是把这个结果返回给应用。一个route可以拥有一个名字。</p>

<h3>route paths</h3>

<p>一条route中的URL模式（pattern）</p>

<h3>routing variables</h3>

<p>匹配之后返回的键值对。route path中定义的变量叫做path变量，他们的值来自URL中。route path外定义的变量叫做默认变量，其值不受URL影响。</p>

<p>特别注意！在WSGI中，用于route的关键字是environment（environ）中的wsgiorg.routing_args.</p>

<h2>2 简单的例子：</h2>

<pre><code># Setup a mapper
from routes import Mapper
map = Mapper()
map.connect(None, "/error/{action}/{id}, controller="error")
map.connect("home", "/", controller="main", action="index")
map.connect(None, "/{controller}/{action}")
map.connect(None, "/{controller}/{action}/{id}")


# Match a URL, returns a dict or None if no match
result = map.match('/error/myapp/4')
# result == {'controller': 'main', 'action': 'myapp', 'id': '4'}
</code></pre>

<p>对上面代码的一个简单解释：
1~2行创建了一个简单的mapper。</p>

<p>3行创建了一个以/error开始的任意三段的路由，并设置controller变量为一个常量！所以如果一个URL是<code>/error/images/arrow.jpg</code>，执行map.match（&#8221;/error/images/arrow.jpg&#8221;）得到的字典结果就会是：</p>

<p><code>{"controller": "error", "action": "images", "id": "arrow.jpg"}</code></p>

<p>4行创建了/的映射，并将controller和action设置为常量。而&#8221;home&#8221;表示此条route的名字。</p>

<p>6行匹配任务两端的URL。7行匹配任意三段的URL。所以前面的例子&#8221; “/error/images/arrow.jpg”&#8221;还能够匹配6、7行，在这种情况下，Routes采用的是以第一次匹配到的为准，顺序优先。</p>

<p>还有下面的例子：</p>

<pre><code>m.connect("/feeds/{category}/atom.xml", controller="feeds", action="atom")
m.connect("history", "/archives/by_eon/{century}", controller="archives",
      action="aggregate")
m.connect("article", "/article/{section}/{slug}/{page}.html",
      controller="article", action="view")
</code></pre>

<h2>3 初步深入</h2>

<h3>3.1 Magic path_info</h3>

<p>如果URL中使用了path_info，Routes会将先前的所有信息移动到“SCRIPT_NAME”这个环境变量中。当另外的WSGI应用有自己的routing的时候这个能起到很好的转移作用。看看如下的例子，用于WSGI环境。</p>

<pre><code>map.connect(None, "/cards/{path_info:.*}",
   controller="main", action="cards")
# Incoming URL "/cards/diamonds/4.png"
=&gt; {"controller": "main", action: "cards", "path_info": "/diamonds/4.png"}
# Second WSGI application sees:
# SCRIPT_NAME="/cards"   PATH_INFO="/diamonds/4.png"
</code></pre>

<h3>3.2 Condition条件匹配</h3>

<p>在一条route中，可以加入相应的条件，以加强匹配效果。condition是一个字典，最多只有以下三个关键字：
* method
大写的HTTP方法。
* sub_domain
这个目前不是很熟悉。
* function
三种方式使用如下：用一个函数来对请求进行处理，<code>func(environ, match_dict) =&gt; bool</code></p>

<p>{}</p>

<h1>Match only if the HTTP method is &#8220;GET&#8221; or &#8220;HEAD&#8221;.</h1>

<p>m.connect(&#8220;/user/list&#8221;, controller=&#8221;user&#8221;, action=&#8221;list&#8221;,</p>

<pre><code>      conditions=dict(method=["GET", "HEAD"]))
</code></pre>

<h1>A sub-domain should be present.</h1>

<p>m.connect(&#8220;/&#8221;, controller=&#8221;user&#8221;, action=&#8221;home&#8221;,</p>

<pre><code>      conditions=dict(sub_domain=True))
</code></pre>

<h1>Sub-domain should be either &#8220;fred&#8221; or &#8220;george&#8221;.</h1>

<p>m.connect(&#8220;/&#8221;, controller=&#8221;user&#8221;, action=&#8221;home&#8221;,</p>

<pre><code>      conditions=dict(sub_domain=["fred", "george"]))
</code></pre>

<h1>Put the referrer into the resulting match dictionary.</h1>

<h1>This function always returns true, so it never prevents the match</h1>

<h1>from succeeding.</h1>

<p>def referals(environ, result):</p>

<pre><code>result["referer"] = environ.get("HTTP_REFERER")
return True
</code></pre>

<p>m.connect(&#8220;/{controller}/{action}/{id}&#8221;,</p>

<pre><code>conditions=dict(function=referals))
</code></pre>

<p>{}</p>

<h3>3.3 在route中还可以使用通配符和正则表达式</h3>

<h3>3.4 格式扩展</h3>

<p>通过<code>{.format}</code>，可以匹配一个格式的扩展，比如.html或者.json。比如：</p>

<pre><code>map.connect('/entries/{id}{.format:json}')
</code></pre>

<p>就只会匹配到&#8221;/entries/1.json&#8221;。</p>

<h3>submapper</h3>

<h3>从子程序添加routes</h3>

<p>一个子程序可以传递给父程序一个routes的列表，通过mapper的<code>extend</code>方法，增加routes。如下：</p>

<pre><code>routes = [
   Route("index", "/index.html", controller="home", action="index"),
    ]

map.extend(routes)
# /index.html =&gt; {"controller": "home", "action": "index"}

map.extend(routes, "/subapp")
# /subapp/index.html =&gt; {"controller": "home", "action": "index"}
</code></pre>

<p><a href="http://routes.readthedocs.org/en/latest/setting_up.html">http://routes.readthedocs.org/en/latest/setting_up.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to add api extension to quantum 1]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/how-to-add-api-extension-to-quantum-1/"/>
    <updated>2012-11-28T11:10:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/how-to-add-api-extension-to-quantum-1</id>
    <content type="html"><![CDATA[<p>未完成！！！</p>

<!--more-->


<p>{}
class ExtensionManager(object):</p>

<pre><code>"""Load extensions from the configured extension path.

See tests/unit/extensions/foxinsocks.py for an
example extension implementation.

"""
def __init__(self, path):
    LOG.info(_('Initializing extension manager.'))
    self.path = path 
    self.extensions = {}
    self._load_all_extensions()
</code></pre>

<p>{}</p>

<p>class ResourceExtension(object):</p>

<pre><code>"""Add top level resources to the OpenStack API in Quantum."""

def __init__(self, collection, controller, parent=None,
             collection_actions={}, member_actions={}):
    self.collection = collection
    self.controller = controller
    self.parent = parent
    self.collection_actions = collection_actions
    self.member_actions = member_actions
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之WebOb(1)-概念]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-two-webob-1/"/>
    <updated>2012-11-21T16:56:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-two-webob-1</id>
    <content type="html"><![CDATA[<p>这次主要来学习Paste的核心内容，WebOb，内容依然来自官方翻译、网络参考以及自己的实践。</p>

<blockquote></blockquote>

<h2>What is WebOb?</h2>

<p>WebOb是一个Python库，主要是用在WSGI中对请求环境变量request environment（也就是WSGI应用中的参数environ）进行包装（提供wrapper），并提供了一个对象来方便的处理返回response消息。WebOb提供的对象映射了大多数的HTTP方法，包括头解析，content协商等。这里的映射，就是说只需要对对象进行操作，就可以完成HHTP的方法，从而大大简化开发难度。引用官方文档，WebOb有以下特点：</p>

<blockquote><p>Maps most of HTTP spec to friendly data structures.
Time-proven codebase that works around and hides all known WSGI quirks.
Zero known issues (reported bugs are always fixed ASAP).
100% test coverage.
No external dependencies.
Supports Python 3</p></blockquote>

<p>WebOb为HTTP的请求和相应提供了相应的对象。通过对WSGI request environment进行wrap来简化操作。</p>

<h2>Request</h2>

<p><code>webob.Request</code>对象是对WSGI environ dictionary的一个包装。后者这个字典以键值的形式描述了一个HTTP请求包括path信息和query string，以及一个与文件对象类似的秒速请求的body，以及一些其他的自定义keys。如下可以创建一个简单的Request对象。</p>

<pre><code>&gt;&gt;&gt;from webob import Request
&gt;&gt;&gt;environ = {'method': 'GET'}  
&gt;&gt;&gt;req = Request(environ) 
</code></pre>

<p>强调，<code>The request object wraps the environment</code>，仅仅是包装，所以你可以对这个environ进行读写的。可以通过req.environ可以访问到这个environ。但是一般都没必要这样做，直接用这个Request对象来操作就好了。如下：</p>

<pre><code>&gt;&gt;&gt;req.environ
{'method': 'GET'}
&gt;&gt;&gt;req.method 
'GET'
</code></pre>

<h2>此外，还有，req.accept_language, req.content_length, req.user_agent等。我们可以通过dir(req)来看看这个对象的方法咯。</h2>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">dir</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;ResponseClass&#39;</span><span class="p">,</span> <span class="s1">&#39;__class__&#39;</span><span class="p">,</span> <span class="s1">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s1">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s1">&#39;__format__&#39;</span><span class="p">,</span> <span class="s1">&#39;__getattr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s1">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s1">&#39;__init__&#39;</span><span class="p">,</span> <span class="s1">&#39;__module__&#39;</span><span class="p">,</span> <span class="s1">&#39;__new__&#39;</span><span class="p">,</span> <span class="s1">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s1">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s1">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s1">&#39;__str__&#39;</span><span class="p">,</span> <span class="s1">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s1">&#39;__weakref__&#39;</span><span class="p">,</span> <span class="s1">&#39;_body__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_body__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_body__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_body_file__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_body_file__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_body_file__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_cache_control__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_cache_control__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_cache_control__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_charset&#39;</span><span class="p">,</span> <span class="s1">&#39;_check_charset&#39;</span><span class="p">,</span> <span class="s1">&#39;_content_type__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_content_type__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_content_type_raw&#39;</span><span class="p">,</span> <span class="s1">&#39;_copy_body_tempfile&#39;</span><span class="p">,</span> <span class="s1">&#39;_headers&#39;</span><span class="p">,</span> <span class="s1">&#39;_headers__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_headers__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_host__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_host__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_host__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_is_body_readable__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_is_body_readable__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_json_body__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_json_body__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_json_body__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_setattr_stacklevel&#39;</span><span class="p">,</span> <span class="s1">&#39;_text__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_text__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_text__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_update_cache_control&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlargs__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlargs__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlargs__set&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlvars__del&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlvars__get&#39;</span><span class="p">,</span> <span class="s1">&#39;_urlvars__set&#39;</span><span class="p">,</span> <span class="s1">&#39;accept&#39;</span><span class="p">,</span> <span class="s1">&#39;accept_charset&#39;</span><span class="p">,</span> <span class="s1">&#39;accept_encoding&#39;</span><span class="p">,</span> <span class="s1">&#39;accept_language&#39;</span><span class="p">,</span> <span class="s1">&#39;application_url&#39;</span><span class="p">,</span> <span class="s1">&#39;as_bytes&#39;</span><span class="p">,</span> <span class="s1">&#39;as_string&#39;</span><span class="p">,</span> <span class="s1">&#39;as_text&#39;</span><span class="p">,</span> <span class="s1">&#39;authorization&#39;</span><span class="p">,</span> <span class="s1">&#39;blank&#39;</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="s1">&#39;body_file&#39;</span><span class="p">,</span> <span class="s1">&#39;body_file_raw&#39;</span><span class="p">,</span> <span class="s1">&#39;body_file_seekable&#39;</span><span class="p">,</span> <span class="s1">&#39;cache_control&#39;</span><span class="p">,</span> <span class="s1">&#39;call_application&#39;</span><span class="p">,</span> <span class="s1">&#39;charset&#39;</span><span class="p">,</span> <span class="s1">&#39;client_addr&#39;</span><span class="p">,</span> <span class="s1">&#39;content_length&#39;</span><span class="p">,</span> <span class="s1">&#39;content_type&#39;</span><span class="p">,</span> <span class="s1">&#39;cookies&#39;</span><span class="p">,</span> <span class="s1">&#39;copy&#39;</span><span class="p">,</span> <span class="s1">&#39;copy_body&#39;</span><span class="p">,</span> <span class="s1">&#39;copy_get&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;decode&#39;</span><span class="p">,</span> <span class="s1">&#39;encget&#39;</span><span class="p">,</span> <span class="s1">&#39;encset&#39;</span><span class="p">,</span> <span class="s1">&#39;environ&#39;</span><span class="p">,</span> <span class="s1">&#39;from_bytes&#39;</span><span class="p">,</span> <span class="s1">&#39;from_file&#39;</span><span class="p">,</span> <span class="s1">&#39;from_string&#39;</span><span class="p">,</span> <span class="s1">&#39;from_text&#39;</span><span class="p">,</span> <span class="s1">&#39;get_response&#39;</span><span class="p">,</span> <span class="s1">&#39;headers&#39;</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">,</span> <span class="s1">&#39;host_port&#39;</span><span class="p">,</span> <span class="s1">&#39;host_url&#39;</span><span class="p">,</span> <span class="s1">&#39;http_version&#39;</span><span class="p">,</span> <span class="s1">&#39;if_match&#39;</span><span class="p">,</span> <span class="s1">&#39;if_modified_since&#39;</span><span class="p">,</span> <span class="s1">&#39;if_none_match&#39;</span><span class="p">,</span> <span class="s1">&#39;if_range&#39;</span><span class="p">,</span> <span class="s1">&#39;if_unmodified_since&#39;</span><span class="p">,</span> <span class="s1">&#39;is_body_readable&#39;</span><span class="p">,</span> <span class="s1">&#39;is_body_seekable&#39;</span><span class="p">,</span> <span class="s1">&#39;is_xhr&#39;</span><span class="p">,</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span> <span class="s1">&#39;json_body&#39;</span><span class="p">,</span> <span class="s1">&#39;make_body_seekable&#39;</span><span class="p">,</span> <span class="s1">&#39;make_default_send_app&#39;</span><span class="p">,</span> <span class="s1">&#39;make_tempfile&#39;</span><span class="p">,</span> <span class="s1">&#39;max_forwards&#39;</span><span class="p">,</span> <span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="s1">&#39;params&#39;</span><span class="p">,</span> <span class="s1">&#39;path&#39;</span><span class="p">,</span> <span class="s1">&#39;path_info&#39;</span><span class="p">,</span> <span class="s1">&#39;path_info_peek&#39;</span><span class="p">,</span> <span class="s1">&#39;path_info_pop&#39;</span><span class="p">,</span> <span class="s1">&#39;path_qs&#39;</span><span class="p">,</span> <span class="s1">&#39;path_url&#39;</span><span class="p">,</span> <span class="s1">&#39;pragma&#39;</span><span class="p">,</span> <span class="s1">&#39;query_string&#39;</span><span class="p">,</span> <span class="s1">&#39;range&#39;</span><span class="p">,</span> <span class="s1">&#39;referer&#39;</span><span class="p">,</span> <span class="s1">&#39;referrer&#39;</span><span class="p">,</span> <span class="s1">&#39;relative_url&#39;</span><span class="p">,</span> <span class="s1">&#39;remote_addr&#39;</span><span class="p">,</span> <span class="s1">&#39;remote_user&#39;</span><span class="p">,</span> <span class="s1">&#39;remove_conditional_headers&#39;</span><span class="p">,</span> <span class="s1">&#39;request_body_tempfile_limit&#39;</span><span class="p">,</span> <span class="s1">&#39;scheme&#39;</span><span class="p">,</span> <span class="s1">&#39;script_name&#39;</span><span class="p">,</span> <span class="s1">&#39;send&#39;</span><span class="p">,</span> <span class="s1">&#39;server_name&#39;</span><span class="p">,</span> <span class="s1">&#39;server_port&#39;</span><span class="p">,</span> <span class="s1">&#39;str_GET&#39;</span><span class="p">,</span> <span class="s1">&#39;str_POST&#39;</span><span class="p">,</span> <span class="s1">&#39;str_cookies&#39;</span><span class="p">,</span> <span class="s1">&#39;str_params&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="s1">&#39;upath_info&#39;</span><span class="p">,</span> <span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="s1">&#39;url_encoding&#39;</span><span class="p">,</span> <span class="s1">&#39;urlargs&#39;</span><span class="p">,</span> <span class="s1">&#39;urlvars&#39;</span><span class="p">,</span> <span class="s1">&#39;uscript_name&#39;</span><span class="p">,</span> <span class="s1">&#39;user_agent&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>一个WSGI的environ需要一些必须的参数，所以Request对象有一个构造器，在创建的时候就会自动添加最小的一些必要的项，如上，我们只指定了一个method，那么我们看看。</p>

<pre><code>&gt;&gt;&gt; req
&lt;Request at 0x2bbb4d0 (invalid WSGI environ)&gt;
</code></pre>

<p>显示这个WSGI environ是无效的，因为缺少必要的信息。我们来调用构造器的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>req = Request.blank('/article?id=1')
</span><span class='line'>>>> from pprint import pprint
</span><span class='line'>>>> pprint(req.environ)
</span><span class='line'>{'HTTP_HOST': 'localhost:80',
</span><span class='line'> 'PATH_INFO': '/article',
</span><span class='line'> 'QUERY_STRING': 'id=1',
</span><span class='line'> 'REQUEST_METHOD': 'GET',
</span><span class='line'> 'SCRIPT_NAME': '',
</span><span class='line'> 'SERVER_NAME': 'localhost',
</span><span class='line'> 'SERVER_PORT': '80',
</span><span class='line'> 'SERVER_PROTOCOL': 'HTTP/1.0',
</span><span class='line'> 'wsgi.errors': &lt;open file '&lt;stderr>', mode 'w' at ...>,
</span><span class='line'> 'wsgi.input': &lt;...IO... object at ...>,
</span><span class='line'> 'wsgi.multiprocess': False,
</span><span class='line'> 'wsgi.multithread': False,
</span><span class='line'> 'wsgi.run_once': False,
</span><span class='line'> 'wsgi.url_scheme': 'http',
</span><span class='line'> 'wsgi.version': (1, 0)}</span></code></pre></td></tr></table></div></figure>


<h2>pprint用来打印字典等效果很好的。这里简单对url做一个说明，/article?id=1我们可以看到article是属于PATH中的，而?分割的是参数，也就是query_string。如果指定了多个参数，也是一起放在QUERY_STRING里面的，如下：</h2>

<p>{}</p>

<blockquote><blockquote><blockquote><p>req = Request.blank(&#8216;/article?id=1&amp;id=2&#8217;)
pprint(req.environ)
{&#8216;HTTP_HOST&#8217;: &#8216;localhost:80&#8217;,
 &#8216;PATH_INFO&#8217;: &#8216;/article&#8217;,
 &#8216;QUERY_STRING&#8217;: &#8216;id=1&amp;id=2&#8217;,
 &#8216;REQUEST_METHOD&#8217;: &#8216;GET&#8217;,
 &#8216;SCRIPT_NAME&#8217;: &#8221;,
 &#8216;SERVER_NAME&#8217;: &#8216;localhost&#8217;,
 &#8216;SERVER_PORT&#8217;: &#8216;80&#8217;,
 &#8216;SERVER_PROTOCOL&#8217;: &#8216;HTTP/1.0&#8217;,
 &#8216;wsgi.errors&#8217;: <open file '<stderr>&#8217;, mode &#8216;w&#8217; at 0x7f33b863a270>,
 &#8216;wsgi.input&#8217;: &lt;_io.BytesIO object at 0x2b94e30>,
 &#8216;wsgi.multiprocess&#8217;: False,
 &#8216;wsgi.multithread&#8217;: False,
 &#8216;wsgi.run_once&#8217;: False,
 &#8216;wsgi.url_scheme&#8217;: &#8216;http&#8217;,
 &#8216;wsgi.version&#8217;: (1, 0)}</p>

<h2>{}</h2>

<h2>Request body</h2>

<p>req.body是一个描述了请求body（比如，POST一个表单，PUT的内容）的一个类文件对象（file-like object），我们先把body设置为一个字符串，会被自动转换为一个类文件对象，通过req.body可以访问到body的内容。</p></blockquote></blockquote></blockquote>

<pre><code>&gt;&gt;&gt; req.body="this is body"
&gt;&gt;&gt; req.body
'this is body'
&gt;&gt;&gt; type(req.body)
&lt;type 'str'&gt;
</code></pre>

<h2>Method &amp; URL</h2>

<p>一个请求的所有属性都可以通过Request对象的属性来访问，这些属性如下：</p>

<h2>一个请求对象里面比较重要的属性有以下：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> req.scheme
</span><span class='line'>'http'
</span><span class='line'>>>>req.method
</span><span class='line'>'GET'
</span><span class='line'>>>> req.GET
</span><span class='line'>GET([(u'id', u'1'), (u'id', u'2')])
</span><span class='line'>>>> req.params
</span><span class='line'>NestedMultiDict([(u'id', u'1'), (u'id', u'2')])
</span><span class='line'>>>> req.body
</span><span class='line'>'this is body'
</span><span class='line'>>>> req.headers
</span><span class='line'>&lt;webob.headers.EnvironHeaders object at 0x2bbbc10>
</span><span class='line'>>>> req.script_name  # The base of the URL
</span><span class='line'>''
</span><span class='line'>>>> req.script_name = '/blog' # make it more interesting
</span><span class='line'>>>> req.path_info    # The yet-to-be-consumed part of the URL
</span><span class='line'>'/article'
</span><span class='line'>>>> req.content_type # Content-Type of the request body
</span><span class='line'>''
</span><span class='line'>>>> req.host
</span><span class='line'>'localhost:80'
</span><span class='line'>>>> req.host_url
</span><span class='line'>'http://localhost'
</span><span class='line'>>>> req.application_url
</span><span class='line'>'http://localhost/blog'
</span><span class='line'>>>> req.path_url
</span><span class='line'>'http://localhost/blog/article'
</span><span class='line'>>>> req.url
</span><span class='line'>'http://localhost/blog/article?id=1'
</span><span class='line'>>>> req.path
</span><span class='line'>'/blog/article'
</span><span class='line'>>>> req.path_qs
</span><span class='line'>'/blog/article?id=1'
</span><span class='line'>>>> req.query_string
</span><span class='line'>'id=1'
</span><span class='line'>
</span><span class='line'>req.POST
</span><span class='line'>
</span><span class='line'>req.cookies
</span><span class='line'>
</span><span class='line'>req.urlvars或者req.urlargs</span></code></pre></td></tr></table></div></figure>


<hr />

<p>对于一个URL，由于我们需要处理PATH_INFO，所以还有以下几种使用：</p>

<pre><code>&gt;&gt;&gt; req.path_info_peek() # Doesn't change request
'article'
&gt;&gt;&gt; req.path_info_pop()  # Does change request!
'article'
&gt;&gt;&gt; req.script_name
'/blog/article'
&gt;&gt;&gt; req.path_info #上面已经pop了，所以这里是空，否则应该是'/article'的。
''
</code></pre>

<h2>Headers</h2>

<p>一个请求的header主要是content的定义以及host的定义，可能还会带有一些认证信息。注意，这里的操作大小写敏感。</p>

<pre><code>&gt;&gt;&gt; req.headers['Content-Type'] = 'application/x-www-urlencoded'
&gt;&gt;&gt; req.headers.items()
[('Content-Length', '4'), ('Content-Type', 'application/x-www-urlencoded'), ('Host', 'localhost:80')]
&gt;&gt;&gt; req.environ['CONTENT_TYPE']
'application/x-www-urlencoded'
</code></pre>

<h2>Query &amp; POST</h2>

<p>请求可以在两个位置拥有变量，一个是query string（类似上面的?id=1）,二是在body里面（常用于POST表单），但是即便是POST请求也可以拥有query string。所以这两个位置都可能存在变量。并且一个变量可能出现多次，比如?check=a&amp;check=b。</p>

<p>对于上面的东西，WebOb使用了多字典（MultiDict）的形式。所谓MultiDict,就在把一个包含键值对的列表包装成一个字典，看起来就像一个单值字典（single valued dict），但是你可以获得某一个key的所有值，通过.getall(key)(始终返回一个列表)，也可以通过.items()来获得所有的键值对以及.values()获得所有的值。举个例子：</p>

<pre><code>&gt;&gt;&gt; req = Request.blank('/test?check=a&amp;check=b&amp;name=Bob')
&gt;&gt;&gt; req.GET
MultiDict([(u'check', u'a'), (u'check', u'b'), (u'name', u'Bob')])
&gt;&gt;&gt; req.GET['check']
u'b'
&gt;&gt;&gt; req.GET.getall('check')
[u'a', u'b']
&gt;&gt;&gt; req.GET.items()
[(u'check', u'a'), (u'check', u'b'), (u'name', u'Bob')]
&gt;&gt;&gt; req.GET.values()
[u'a', u'b', u'Bob']
</code></pre>

<p>接下来，我们把req变成一个POST请求。无非就是做两个事，一是更改method，一是给出body。</p>

<pre><code>&gt;&gt;&gt; req.POST
&lt;NoVars: Not a form request&gt;
&gt;&gt;&gt; req.POST.items()  # NoVars can be read like a dict, but not written
[]
&gt;&gt;&gt; req.method = 'POST'
&gt;&gt;&gt; req.body = 'name=Joe&amp;email=joe@example.com'
&gt;&gt;&gt; req.POST
MultiDict([(u'name', u'Joe'), (u'email', u'joe@example.com')])
&gt;&gt;&gt; req.POST['name']
u'Joe'
</code></pre>

<p>前面我们提到，一个请求的变量（也可以较为参数）可以存在于URL中也可以在Body中，如果我们不关系，变量的位置，那么用req.params就可以看到所有位置的变量，同样，也是通过MultiDict这种形式保存的。</p>

<pre><code>&gt;&gt;&gt; req.params
NestedMultiDict([(u'check', u'a'), (u'check', u'b'), (u'name', u'Bob'), (u'name', u'Joe'), (u'email', u'joe@example.com')])
&gt;&gt;&gt; req.params['name']
u'Bob'
&gt;&gt;&gt; req.params.getall('name')
[u'Bob', u'Joe']
&gt;&gt;&gt; for name, value in req.params.items():
...     print '%s: %r' % (name, value)
check: u'a'
check: u'b'
name: u'Bob'
name: u'Joe'
email: u'joe@example.com'
</code></pre>

<p>相对而言，这种方式还很简单一点。至于GET和POST，命名是历史遗留下的。req.GET也可以使用在非GET的请求中，从而来获得参数。如下：</p>

<pre><code>&gt;&gt;&gt; req = Request.blank('/test?check=a&amp;check=b&amp;name=Bob')
&gt;&gt;&gt; req.method = 'PUT'
&gt;&gt;&gt; req.body = body = 'var1=value1&amp;var2=value2&amp;rep=1&amp;rep=2'
&gt;&gt;&gt; req.environ['CONTENT_LENGTH'] = str(len(req.body))
&gt;&gt;&gt; req.environ['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
&gt;&gt;&gt; req.GET
MultiDict([(u'check', u'a'), (u'check', u'b'), (u'name', u'Bob')])
&gt;&gt;&gt; req.POST
MultiDict([(u'var1', u'value1'), (u'var2', u'value2'), (u'rep', u'1'), (u'rep', u'2')])
</code></pre>

<p>另外，应用中，应该强制使用UTF-8编码，也是通过制定字符集参数。</p>

<pre><code>&gt;&gt;&gt; req.charset = 'utf8'
&gt;&gt;&gt; req.GET
MultiDict([(u'check', u'a'), (u'check', u'b'), (u'name', u'Bob')])
</code></pre>

<p><a href="http://docs.webob.org/en/latest/reference.html#introduction">http://docs.webob.org/en/latest/reference.html#introduction</a>
<a href="http://docs.webob.org/en/latest/index.html">http://docs.webob.org/en/latest/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之Deploy(2)-实践]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-2/"/>
    <updated>2012-11-20T10:39:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-2</id>
    <content type="html"><![CDATA[<p>上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。</p>

<!--more-->


<h2>1 OpenStack Quantum配置文件api-paste.ini</h2>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:quantum</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/: quantumversions</span>
</span><span class='line'><span class="sr">/</span><span class="n">v2</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span> <span class="n">quantumapi_v2_0</span>
</span><span class='line'><span class="c1">#使用composite分解机制，composite使用了usrlmap，xxxxx/xxx的API交给quantumversions处理。xxxx/v2.0/xxxx的API交给quantumapi_v2_0处理。</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:quantumapi_v2_0</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:quantum</span><span class="o">.</span><span class="n">auth</span><span class="ss">:pipeline_factory</span>
</span><span class='line'><span class="n">noauth</span> <span class="o">=</span> <span class="n">extensions</span> <span class="n">quantumapiapp_v2_0</span>
</span><span class='line'><span class="n">keystone</span> <span class="o">=</span> <span class="n">authtoken</span> <span class="n">keystonecontext</span> <span class="n">extensions</span> <span class="n">quantumapiapp_v2_0</span>
</span><span class='line'><span class="c1">#quantumapi_v2_0依然是一个分解组件，使用了quantum.auth模块下的pipeline_factory，对于这个factory，传递了两个参数，一个是noauth,一个是keystone。</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="ss">:keystonecontext</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">quantum</span><span class="o">.</span><span class="n">auth</span><span class="ss">:QuantumKeystoneContext</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'><span class="c1">#对于keystonecontext，实际上是一个过滤器，使用了quantum.auth模块下的类QuantumKeystoneContext的factory函数</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="ss">:authtoken</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">keystone</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">auth_token</span><span class="ss">:filter_factory</span>
</span><span class='line'><span class="n">auth_host</span> <span class="o">=</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="n">auth_port</span> <span class="o">=</span> <span class="mi">35357</span>
</span><span class='line'><span class="n">auth_protocol</span> <span class="o">=</span> <span class="n">http</span>
</span><span class='line'><span class="n">admin_tenant_name</span> <span class="o">=</span> <span class="o">%</span><span class="no">SERVICE_TENANT_NAME</span><span class="o">%</span>
</span><span class='line'><span class="n">admin_user</span> <span class="o">=</span> <span class="o">%</span><span class="no">SERVICE_USER</span><span class="o">%</span>
</span><span class='line'><span class="n">admin_password</span> <span class="o">=</span> <span class="o">%</span><span class="no">SERVICE_PASSWORD</span><span class="o">%</span>
</span><span class='line'><span class="c1">#定义了另外一个filter</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="ss">:extensions</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">quantum</span><span class="o">.</span><span class="n">extensions</span><span class="o">.</span><span class="n">extensions</span><span class="ss">:plugin_aware_extension_middleware_factory</span>
</span><span class='line'><span class="c1">#定义了另外一个filter,这个filter是为了支持扩展quantum api的</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:quantumversions</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">quantum</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">versions</span><span class="ss">:Versions</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'><span class="c1">#核心的app部分，使用工厂函数，将app指向python代码。app_factory表明这个函数接收一系列参数，[DEFAULET]以及[app:]下面的，本部分本section没有参数，并返回一个函数对象。</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:quantumapiapp_v2_0</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">quantum</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">v2</span><span class="o">.</span><span class="n">router</span><span class="ss">:APIRouter</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'><span class="c1">#同上</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来总结一下，整个Quantum处理api的流程如下,其中，强调的部分为函数代码，其他为配置文件中的section部分。</p>

<p>对于路径为<code>/</code>类的API&#8212;-quantumversions处理&#8212;-调用<code>quantum.api.versions:Version</code>类的<code>factory函数</code>处理。</p>

<p>对于路径为<code>/2.0</code>类的API&#8212;-quantumapi_v2_0处理&#8212;-调用<code>quantum.auth</code>中的<code>pipeline_factory</code>处理,同时传递了两个参数noauth和keystone,类型为字典。
这个pipeline_factory中会读取另外一个变量CONF.auth（来自另外一个配置文件，不考虑），选择采用的认证方式，然后选择noauth或者keystone，并读取参数的值。
那么，就有两种情况：</p>

<p>noauth: 应用将会先经过extensions这个filter处理&#8212;-调用了<code>quantum.extensions.extensions:plugin_aware_extension_middleware_factory</code>，用来处理扩展api请求，这是第一次包装&#8212;-quantumapiapp_v2_0，这才是实际的WSGI应用，调用了<code>quantum.api.v2.router:APIRouter.factory</code>，并处理返回结果。</p>

<p>keystone：和上面类似，不同的是多了几个filter,authtoken keystonecontext extensions quantumapiapp_v2_0,并且在每个filter中可能还会有参数传递给这个fliter。</p>

<p>总的来说，通过pipeline装载多个filter,将最基本的app&#8211;APIRouter，层层包装，使其变为一个具有处理认证，扩展API等的应用（逻辑上看），filter的好处就是可以自定义，比如可以不要认证功能，这比写一个囊括全部功能的应用明显要好的多。</p>

<h2>2 代码实践</h2>

<h3>2.1 配置文件</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="no">DEFAULT</span><span class="o">]</span>
</span><span class='line'><span class="n">company</span> <span class="o">=</span> <span class="no">UESTC</span>
</span><span class='line'><span class="n">school</span> <span class="o">=</span> <span class="no">Commuication</span> <span class="ow">and</span> <span class="no">Information</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:common</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/:showversion</span>
</span><span class='line'><span class="sr">/</span><span class="n">detail</span><span class="ss">:showdetail</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">pipeline</span><span class="ss">:showdetail</span><span class="o">]</span>
</span><span class='line'><span class="n">pipeline</span> <span class="o">=</span> <span class="n">filter1</span> <span class="n">filter2</span> <span class="n">showstudetail</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="ss">:filter1</span><span class="o">]</span>
</span><span class='line'><span class="c1">#filter1 deal with auth,read args below</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:AuthFilter</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">passwd</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="ss">:filter2</span><span class="o">]</span>
</span><span class='line'><span class="c1">#filter2 deal with time,read args below</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:LogFilter</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'><span class="c1">#all value is string</span>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="mi">20121120</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:showstudetail</span><span class="o">]</span>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="n">wangchang</span>
</span><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">23</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:ShowStuDetail</span><span class="o">.</span><span class="n">factory</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:showversion</span><span class="o">]</span>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:ShowVersion</span><span class="o">.</span><span class="n">factory</span>
</span></code></pre></td></tr></table></div></figure>


<p>从配置文件可以看出，这个程序会有如下操作：
*对于http://localhost/的访问，会调用showversion这个应用，应用读取ini文件中的version值并返回。__注意，在ini中的所有值都是字符串。</p>

<p>对于http://localhost/detail的访问，会先经过filter1以及filter2，这两个filter分别处理认证和LOG信息，他们会读取ini配置中的用户信息以及时间。最后才是交给showstudetail处理，showstudetail会读取ini中的用户信息并返回。__注意，使用多个filter的时候需要使用pipeline方式。</p>

<h3>2.2 代码</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">webob</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">webob</span> <span class="kn">import</span> <span class="n">Request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">webob</span> <span class="kn">import</span> <span class="n">Response</span>
</span><span class='line'><span class="c">#from webob import environ</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">paste.deploy</span> <span class="kn">import</span> <span class="n">loadapp</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref.simple_server</span> <span class="kn">import</span> <span class="n">make_server</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AuthFilter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&#39;&#39;&#39;filter1,auth</span>
</span><span class='line'><span class="sd">         1.factory read args and print,return self instance</span>
</span><span class='line'><span class="sd">         2.call method return app</span>
</span><span class='line'><span class="sd">         3.AuthFilter(app)</span>
</span><span class='line'><span class="sd">      &#39;&#39;&#39;</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;this is Auth call filter1&#39;</span>
</span><span class='line'>          <span class="c">#pass environ and start_response to app</span>
</span><span class='line'>          <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>      <span class="nd">@classmethod</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>          <span class="sd">&#39;&#39;&#39;global_conf and kwargs are dict&#39;&#39;&#39;</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;######filter1##########&#39;</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;global_conf type:&#39;</span><span class="p">,</span><span class="nb">type</span><span class="p">(</span><span class="n">global_conf</span><span class="p">)</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;[DEFAULT]&#39;</span><span class="p">,</span><span class="n">global_conf</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;kwargs type:&#39;</span><span class="p">,</span><span class="nb">type</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;Auth Info&#39;</span><span class="p">,</span><span class="n">kwargs</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">AuthFilter</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LogFilter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">      filter2,Log</span>
</span><span class='line'><span class="sd">      &#39;&#39;&#39;</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;This is call LogFilter filter2&#39;</span>
</span><span class='line'>          <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>      <span class="nd">@classmethod</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>          <span class="c">#print type(global_conf)</span>
</span><span class='line'>          <span class="c">#print type(kwargs)</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;######filter2###########&#39;</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;[DEFAULT]&#39;</span><span class="p">,</span><span class="n">global_conf</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;Log Info&#39;</span><span class="p">,</span><span class="n">kwargs</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">LogFilter</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ShowStuDetail</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">      app</span>
</span><span class='line'><span class="sd">      &#39;&#39;&#39;</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">age</span><span class="p">):</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;this is call ShowStuDetail&#39;</span>
</span><span class='line'>          <span class="c">#pprint(environ)</span>
</span><span class='line'>          <span class="c">#pprint environ</span>
</span><span class='line'>          <span class="n">start_response</span><span class="p">(</span><span class="s">&quot;200 OK&quot;</span><span class="p">,[(</span><span class="s">&quot;Content-type&quot;</span><span class="p">,</span><span class="s">&quot;text/plain&quot;</span><span class="p">)])</span>
</span><span class='line'>          <span class="n">content</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;name: </span><span class="si">%s</span><span class="s"> age:</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">))</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;**********WSGI INFO***********</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">environ</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>              <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="s"> </span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">[</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">content</span><span class="p">)]</span> <span class="c">#return a list</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@classmethod</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>          <span class="c">#self.name = kwargs[&#39;name&#39;]</span>
</span><span class='line'>          <span class="c">#self.age = kwargs[&#39;age&#39;]</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ShowStuDetail</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;age&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ShowVersion</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">      app</span>
</span><span class='line'><span class="sd">      &#39;&#39;&#39;</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">version</span><span class="p">):</span>
</span><span class='line'>          <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">version</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&#39;this is call ShowVersion&#39;</span>
</span><span class='line'>          <span class="n">req</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">=</span> <span class="n">Response</span><span class="p">()</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;200 OK&#39;</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s">&quot;text/plain&quot;</span>
</span><span class='line'>          <span class="n">content</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>          <span class="c">#pprint(req.environ)</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;*********WSGI INFO*********&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">environ</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>              <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">res</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>      <span class="nd">@classmethod</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>          <span class="c">#self.version = kwargs[&#39;version&#39;]</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ShowVersion</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;version&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>     <span class="n">config</span> <span class="o">=</span> <span class="s">&quot;python_paste.ini&quot;</span>
</span><span class='line'>     <span class="n">appname</span> <span class="o">=</span> <span class="s">&quot;common&quot;</span>
</span><span class='line'>     <span class="n">wsgi_app</span> <span class="o">=</span> <span class="n">loadapp</span><span class="p">(</span><span class="s">&quot;config:</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">config</span><span class="p">),</span> <span class="n">appname</span><span class="p">)</span>
</span><span class='line'>     <span class="n">server</span> <span class="o">=</span> <span class="n">make_server</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span><span class="mi">7070</span><span class="p">,</span><span class="n">wsgi_app</span><span class="p">)</span>
</span><span class='line'>     <span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span><span class='line'>     <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>在程序中，对于web请求的处理，我分别采用了webob和普通WSGI定义的方式，后续我会补上webob的使用。</p>

<h3>2.3 结果</h3>

<p>先从服务端结果分析一下调用流程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ubuntu:~/python$ python python_paste.py
</span><span class='line'>######filter1##########
</span><span class='line'>global_conf type: &lt;type 'dict'>
</span><span class='line'>[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here': '/home/wachang/python', '__file__': '/home/wachang/python/python_paste.ini'}
</span><span class='line'>kwargs type: &lt;type 'dict'>
</span><span class='line'>Auth Info {'passwd': 'admin', 'user': 'admin'}
</span><span class='line'>######filter2###########
</span><span class='line'>[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here': '/home/wachang/python', '__file__': '/home/wachang/python/python_paste.ini'}
</span><span class='line'>Log Info {'date': '20121120'}
</span><span class='line'>以上是PD载入应用时，调用filter的factory方法输出的结果，可以看到，此读出了相关的变量信息。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:23:40] "GET / HTTP/1.1" 200 2938
</span><span class='line'>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:23:40] "GET /favicon.ico HTTP/1.1" 200 2889
</span><span class='line'>以上是接收/请求，因为没有使用filter，直接交予showversion应用处理，并返回。
</span><span class='line'>
</span><span class='line'>this is Auth call filter1
</span><span class='line'>This is call LogFilter filter2
</span><span class='line'>this is call ShowStuDetail
</span><span class='line'>localhost - - [21/Nov/2012 13:24:23] "GET /detail HTTP/1.1" 200 3016
</span><span class='line'>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:24:24] "GET /favicon.ico HTTP/1.1" 200 2889
</span><span class='line'>filter的调用时重点啊，可以看到，调用的顺序和pipeline中一样。最后才调用应用。</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需要继续折腾的话，就看看<a href="http://docs.webob.org/en/latest/do-it-yourself.html">webob:do-it-yourselfrself</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git origin reset to commit]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/git-origin-reset-to-commit/"/>
    <updated>2012-11-19T19:41:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/git-origin-reset-to-commit</id>
    <content type="html"><![CDATA[<p>http://blog.csdn.net/brave_heart_lxl/article/details/6651077
http://blog.csdn.net/brave_heart_lxl/article/details/6651077</p>

<p><strong>this is good</strong></p>

<p>in markdown __means strong!!!!!!!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之Deploy(1)-概念]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1/"/>
    <updated>2012-11-17T13:24:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1</id>
    <content type="html"><![CDATA[<p>Paste.Deploy主要是用来载入WSGI中的Web App使用，其核心函数是loadapp(),下文中PD就指代Paste.Deploy。</p>

<blockquote><p>OS:Ubuntu12.04 2012年11月17日 第一版
主要是对官方文档的一个翻译，外加自己的一些理解
本文的Paste.Deploy使用主要是针对WSGI</p></blockquote>

<h2>1 简介及安装</h2>

<p>Paste Deployment是一种机制，通过loadapp函数和一个配置文件或者egg包来载入WSGI应用。安装很简单，如下两种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install PasteDeploy</span></code></pre></td></tr></table></div></figure>


<p>或者可以从github上进行源码安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hg clone http://bitbucket.org/ianb/pastedeploy
</span><span class='line'>$ cd pastedeploy
</span><span class='line'>$ sudo python setup.py develop</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>2 配置文件Config Flie</h2>

<p>一个配置文件后缀为ini，内容被分为很多段（section），PD只关心带有前缀的段，比如<code>[app:main]</code>或者<code>[filter:errors]</code>，总的来说，一个section的标识就是<code>[type:name]</code>,不是这种类型的section将会被忽略。</p>

<p>一个section的内容是以<code>键=值</code>来标示的。#是一个注释。在段的定义中，有以下几类：</p>

<ul>
<li><p>[app:main]:定义WSGI应用，main表示只有一个应用，有多个应用的话main改为应用名字</p></li>
<li><p>[server:main]:定义WSGI的一个server。</p></li>
<li><p>[composite:xxx]：表示需要将一个请求调度定向（dispatched）到多个,或者多种应用上。以下是一个简单的例子，例子中，使用了composite，通过urlmap来实现载入多应用。</p></li>
<li><p>[fliter:]：定义“过滤器”，将应用进行进一步的封装。</p></li>
<li><p>[DEFAULT]：定义一些默认变量的值。</p></li>
</ul>


<p>以下是一个例子：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:home</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(here)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">filter</span><span class="o">-</span><span class="n">app</span><span class="ss">:blog</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Authentication</span><span class="c1">#auth</span>
</span><span class='line'><span class="k">next</span> <span class="o">=</span> <span class="n">blogapp</span>
</span><span class='line'><span class="n">roles</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">htpasswd</span> <span class="o">=</span> <span class="sr">/home/me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:blogapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:BlogApp</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:wiki</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:mywiki</span><span class="o">.</span><span class="n">main</span><span class="ss">:application</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面会进行分段的讲解</p>

<h3>2.1 composite</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个composite段，表示这将会根据一些条件将web请求调度到不同的应用。<code>use = egg:Paste#urlmap</code>表示我们奖使用<code>Paste</code>egg包中<code>urlmap</code>来实现composite，这一个段(urlmap)可以算是一个通用的composite程序了。根据web请求的path的前缀进行一个到应用的映射(map)。这些被映射的程序就包括blog,home,wiki,config:cms.ini（映射到了另外一个配置文件，PD再根据这个文件进行载入）</p>

<h3>2.2 App type1</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:home</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(here)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span></code></pre></td></tr></table></div></figure>


<p>app是一个callable object，接受的参数(environ,start_response)，这是paste系统交给application的，符合WSGI规范的参数. app需要完成的任务是响应envrion中的请求，准备好响应头和消息体，然后交给start_response处理，并返回响应消息体。<code>egg:Paste#static</code>也是Paste包中的一个简单程序，它只处理静态文件。它需要一个配置文件document_root,后面的值可以是一个变量,形式为%（var）s相应的值应该在[DEFAULT]字段指明以便Paste读取。比如：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:test</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(path)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span><span class='line'><span class="o">[</span><span class="no">DEFAULT</span><span class="o">]</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="sr">/etc/</span><span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.3 fliter</h3>

<p>filter是一个callable object，其唯一参数是(app)，这是WSGI的application对象，filter需要完成的工作是将application包装成另一个application（“过滤”），并返回这个包装后的application。</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">filter</span><span class="o">-</span><span class="n">app</span><span class="ss">:blog</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Authentication</span><span class="c1">#auth</span>
</span><span class='line'><span class="k">next</span> <span class="o">=</span> <span class="n">blogapp</span>
</span><span class='line'><span class="n">roles</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">htpasswd</span> <span class="o">=</span> <span class="sr">/home/me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:blogapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:BlogApp</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[filter-app:blog]</code>fliter-app字段表明你希望对某个应用进行包装，需要包装的应用通过next指明（表明在下一个段中），这个字段的意思就是，在正式调用blogapp之前，我会调用egg:Authentication#auth进行一个用户的验证，随后才会调用blogapp进行处理。后面的[app:blogapp]则是定义了blogapp，并指明了需要的database参数。</p>

<h3>2.4 App type2</h3>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:wiki</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:mywiki</span><span class="o">.</span><span class="n">main</span><span class="ss">:application</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个段和之前的app段定义类似，不同的是对于wiki这个应用，我们没有使用egg包，而是直接对mywiki.main这个模块中的application对象使用了call方法。python，中一切皆对象，作为WSGI app的可以是一个函数，一个类，或者一个实例，使用call的话，相应的函数，类，实例中必须实现<strong>call</strong>()方法。此类app的格式用冒号分割: <code>call(表示使用call方法):模块的完成路径名字:应用变量的完整名字</code></p>

<h2>3 基本使用</h2>

<p>PD的主要使用就是通过读取配置文件载入WSGI应用。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from paste.deploy import loadapp
</span><span class='line'>wsgi_app = loadapp('config:/path/to/config.ini')</span></code></pre></td></tr></table></div></figure>


<p>注意，这里需要指明绝对路径。</p>

<h2>4 更多关于配置文件</h2>

<h3>4.1 App</h3>

<p>单个配置文件中可以定义多个应用个，每个应用有自己独立的段。应用的定义以[app:name]的格式，[app:main]表示只有一个应用。应用的定义支持以下五种格式：</p>

<figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:another_config_file</span><span class="o">.</span><span class="n">ini</span><span class="c1">#app_name</span>
</span><span class='line'><span class="c1">#使用另外一个配置文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myotherapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:MyApp</span>
</span><span class='line'><span class="c1">#使用egg包中的内容</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:mythirdapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:my</span><span class="o">.</span><span class="n">project</span><span class="ss">:myapplication</span>
</span><span class='line'><span class="c1">#使用模块中的callable对象</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:mylastapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">myotherapp</span>
</span><span class='line'><span class="c1">#使用另外一个section</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myfacapp</span><span class="o">]</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">myapp</span><span class="o">.</span><span class="n">modulename</span><span class="ss">:app_factory</span>
</span><span class='line'><span class="c1">#使用工厂函数</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，最后一种方式，将一个app指向了某些python代码。此模式下，必须执行app协议，以app_factory表示，后面的值需要import的东西，在这个例子中myapp.modulename被载入，并从其中取得了app_factory的实例。</p>

<p>app_factory是一个callable object，其接受的参数是一些关于application的配置信息：<code>(global_conf,**kwargs)</code>，<code>global_conf</code>是在ini文件中default section中定义的一系列key-value对，而<code>**kwargs</code>，即一些本地配置，是在ini文件中，app:xxx section中定义的一系列key-value对。app_factory返回值是一个application对象</p>

<p>在app的配置中，use参数以后配置就算结束了。其余的键值参数将会作为参数，传递到factory中，如下：</p>

<pre><code>[app:blog]
use = egg:MyBlog
database = mysql://localhost/blogdb #这是参数
blogname = This Is My Blog! #这是参数
</code></pre>

<h3>4.2 全局配置</h3>

<p>全局配置主要是用于多个应用共用一些变量，这些变量我们规定放在段[DEFAULT]中，如果需要覆盖，可以在自己的app中重新定义，如下：</p>

<pre><code>[DEFAULT]
admin_email = webmaster@example.com
[app:main]
use = ...
set admin_email = bob@example.com
</code></pre>

<h3>4.3 composite app</h3>

<p>composite是一个运行着像是app，但是实际上是由多个应用组成的。urlmap就是composite app的一个例子，url不同的path对应了不同的应用。如下：</p>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = mainapp
/files = staticapp

[app:mainapp]
use = egg:MyApp

[app:staticapp]
use = egg:Paste#static
document_root = /path/to/docroot
</code></pre>

<p>在loadapp函数的执行中，composite app被实例化，它同时还会访问配置文件中定义的其他应用。</p>

<h3>4.4 app定义高级用法</h3>

<p>在app段中，你可以定义fliters和servers，通过<code>fliter:</code>和<code>server:</code> PD通过loadserver和loadfilter函数进行调用，工作机制都一样，返回不同的对象。</p>

<h4>4.4.1 filter composition</h4>

<p>应用filter的方式很多，重要的是看你filter的数量和组织形式。下面会一一介绍应用fliter的几种方式：</p>

<p>1.使用<code>filter-with</code></p>

<pre><code>[app:main]
use = egg:MyEgg
filter-with = printdebug

[filter:printdebug]
use = egg:Paste#printdebug
# and you could have another filter-with here, and so on...
</code></pre>

<p>2.使用<code>fliter-app</code></p>

<pre><code>[fliter-app:printdebug]
use = egg:Paste
next = main

[app:main]
use = egg:MyEgg
</code></pre>

<p>3.使用pipeline</p>

<p>当使用多个filter的时候需要使用pipeline的方式，它需要提供一个key参数pipeline,后面的值是一个列表，最后以应用结尾。如下：</p>

<pre><code>[pipeline:main]
pipeline = filter1 egg:FilterEgg#filter2 filter3 app

[filter:filter1]
...
</code></pre>

<p>假设在ini文件中, 某条pipeline的顺序是filter1, filter2, filter3，app, 那么，最终运行的app_real是这样组织的：
app_real = filter1(filter2(filter3(app)))</p>

<p>在app真正被调用的过程中，filter1._<em>call_</em>(environ,start_response)被首先调用，若某种检查未通过，filter1做出反应；否则交给filter2._<em>call_</em>(environ,start_response)进一步处理，若某种检查未通过，filter2做出反应，中断链条，否则交给filter3._<em>call_</em>(environ,start_response)处理，若filter3的某种检查都通过了，最后交给app._<em>call_</em>(environ,start_response)进行处理。</p>

<h3>4.5 读取配置文件</h3>

<p>如果希望在不创建应用的情况下得到配置文件，可以使用appconfig(uri)函数，将会以字典形式返回使用的配置。这个字典包括了全局很本地的配置信息，所以可以通过属性方法获得相应的attributes （.local_conf and .global_conf）</p>

<h2>5 其他</h2>

<h3>5.1 如何引用Egg包</h3>

<p>egg是python的一个包，pip easy_install等都是安装egg包的方式。关注egg包要注意：
+某一egg包是有标准说明的</p>

<p>python setup.py name
+有entry point，不用太在意，这个只是说明调用程序的参数。</p>

<h3>5.2 定义factory函数</h3>

<p>工厂函数的定义还是遵循之前提到的应用的协议。目前，用于工厂函数的协议有以下：</p>

<p>*paste.app_factory</p>

<p>*paste.composite_factory</p>

<p>*paste.filter_factory</p>

<p>*paste.server_factory</p>

<p>所有的这些都希望有一个含有__call__方法的（函数，方法，类）。</p>

<p>1.<code>paste.app_factory</code></p>

<pre><code>def app_factory(global_config, **local_conf):
    return wsgi_app
</code></pre>

<p>global_config是一个字典，而local_conf则是关键字参数。返回一个wsgi_app（含有<strong>call</strong>方法。）</p>

<p>2.paste.composite_factory`</p>

<pre><code>def composite_factory(loader, global_config, **local_conf):
   return wsgi_app
</code></pre>

<p>loader是一个对象，有几个有趣的方法,get_app(name_or_uri, global_conf=None)根据name返回一个wsgi应用，get_filter（）和get_server（）也是一样。看一个更加复杂的例子，举例一个pipeline应用：</p>

<pre><code>def pipeline_factory(loader, global_config, pipeline):
    # space-separated list of filter and app names:
    pipeline = pipeline.split()
    filters = [loader.get_filter(n) for n in pipeline[:-1]]
    app = loader.get_app(pipeline[-1])
    filters.reverse() # apply in reverse order!
    for filter in filters:
      app = filter(app)
    return app
</code></pre>

<p>相应的配置文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[composite:main]
</span><span class='line'>use = &lt;pipeline_factory_uri>
</span><span class='line'>pipeline = egg:Paste#printdebug session myapp
</span><span class='line'>
</span><span class='line'>[filter:session]
</span><span class='line'>use = egg:Paste#session
</span><span class='line'>store = memory
</span><span class='line'>
</span><span class='line'>[app:myapp]
</span><span class='line'>use = egg:MyApp</span></code></pre></td></tr></table></div></figure>


<p>3.<code>paste.filter_factory</code>
fliter的工厂函数和app的共产函数类似，除了它返回的是一个filter,fliter是一个仅仅把一个wsgi应用作为唯一参数的callable对象，返回一个被filter了的应用。
以下是一个例子，这个filter会检查CGI中REMOTE_USER变量是否存在，并创建一个简单的认证过滤器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def auth_filter_factory(global_conf, req_usernames):
</span><span class='line'>    # space-separated list of usernames:
</span><span class='line'>    req_usernames = req_usernames.split()
</span><span class='line'>    def filter(app):
</span><span class='line'>        return AuthFilter(app, req_usernames)
</span><span class='line'>    return filter
</span><span class='line'>
</span><span class='line'>class AuthFilter(object):
</span><span class='line'>    def __init__(self, app, req_usernames):
</span><span class='line'>        self.app = app
</span><span class='line'>        self.req_usernames = req_usernames
</span><span class='line'>
</span><span class='line'>    def __call__(self, environ, start_response):
</span><span class='line'>        if environ.get('REMOTE_USER') in self.req_usernames:
</span><span class='line'>            return self.app(environ, start_response)
</span><span class='line'>        start_response(
</span><span class='line'>            '403 Forbidden', [('Content-type', 'text/html')])
</span><span class='line'>        return ['You are forbidden to view this resource']</span></code></pre></td></tr></table></div></figure>


<p>4.<code>paste.filter_app_factory</code>
和paste.filter_factory类似，接受一个wsgi应用参数，返回一个WSGI应用，所以如果改变以上代码的：</p>

<pre><code>class AuthFilter(object):
    def __init__(self, app, global_conf, req_usernames):
        ....
</code></pre>

<p>那么，类 AuthFilter就会作为一个filter_app_factory函数使用。</p>

<p>5.<code>paste.server_factory</code></p>

<p>与以上不同的是，函数返回的是一个server,一个server也是一个callable对象，以一个WSGI应用作为参数，而后为这个应用服务。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">server_factory</span><span class="p">(</span><span class="n">global_conf</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
</span><span class='line'>    <span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">serve</span><span class="p">(</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">Server</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">serve</span>
</span></code></pre></td></tr></table></div></figure>


<p>Server的实现用户可以自定义，可以参考python包wsgiref</p>

<p>6.<code>paste.server_runner</code>
与 paste.server_factory类似，不同的是参数格式。</p>

<h2>6 其他一些值得讨论的问题</h2>

<p>ConfigParser（PD底层用到这个来解析ini文件）解析ini文件不是很有效率，是否需要更改？</p>

<p>在配置文件中的对象是否需要是python风格的，而不是字符串的形式？</p>

<blockquote><p>Paste Deployment currently does not require other parts of Paste, and is distributed as a separate package.</p></blockquote>

<p><a href="http://pythonpaste.org/deploy/#defining-factories">http://pythonpaste.org/deploy/#defining-factories</a>
<a href="http://pythonpaste.org/deploy/">http://pythonpaste.org/deploy/</a>
<a href="http://pythonpaste.org/script/#paster-serve">http://pythonpaste.org/script/#paster-serve</a>
<a href="http://kevinzheng.sinaapp.com/?p=104">http://kevinzheng.sinaapp.com/?p=104</a>
<a href="http://blog.csdn.net/icycolawater/article/details/7045287">http://blog.csdn.net/icycolawater/article/details/7045287</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Sqlalchemy指南(一)]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1/"/>
    <updated>2012-11-14T15:11:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1</id>
    <content type="html"><![CDATA[<p>最近项目需要学习sqlalchemy，对于这个神器，网上的教程实在太少了，而且版本太老。于是只好自己慢慢读，以此系列做一个记录的吧！</p>

<blockquote><p>Sqlalchemy version:0.8.b1
使用sqlite或者mysql来练习
主要是参照官方文档，以及实际的使用经验
OS:Win7 or Ubuntu12.04</p></blockquote>

<!--more-->


<h2>Sqlalchemy的架构图</h2>

<p>关于这个架构图，文档解释如下：</p>

<blockquote><p>InSQLAlchemy ORM, the Object Relational Mapper is introduced and fully described. New users should begin with theObject Relational Tutorial.</p>

<p>InSQLAlchemy Core, the breadth of SQLAlchemy’s SQL and database integration and description services are doc-umented, the core of which is the SQL Expression language. The SQL Expression Language is a toolkit all its own, independent of the ORM package, which can be used to construct manipulable SQL expressions which can be programmatically constructed, modified, and executed, returning cursor-like result sets.</p></blockquote>

<h2>环境准备</h2>

<p>pip install 或者 &#8216;easy install&#8217;都可以</p>

<h2>概念解释</h2>

<h3>Engine Class</h3>

<p>class engine主要作用是1、管理与数据库的连接（一个连接池） 2、一个包含多个策略的连接池，这些策略用来配置从连接池中获取连接的方式。
函数create_engine(url,args)用于创建一个和数据库的engine，用于连接的URL格式为：<code>driver://username:password@host:port/database</code>有以下几个方式:</p>

<pre><code>#Create a connection to a database
engine = create_engine('sqlite://')
engine = create_engine('sqlite:///data.sqlite')
engine = create_engine('mysql://localhost/mysql_db')
</code></pre>

<p>其中，参数args是一个字典，有以下一些：</p>

<pre><code>echo=True or False
strategy
use_ansi
encoding
</code></pre>

<p>一个engine有以下方法：connect</p>

<h3>MetaData Class</h3>

<p>class metadata主要作用是，维护数据方法（mysql,sqlite等）以及表的定义。其中包含了收集管理描述表的类的功能。使用MetaData的构造器即可实例化，如果构造器中有engine或者url参数，那么这就是一个bound的MetaDate，如果没参数，就是一个unbound的MetaData。</p>

<pre><code>unbound_meta = MetaData()

db = create_engine('sqlite://')
bound_meta = MetaData(bind=db)
</code></pre>

<p>当MetaData被bind以后，就可以方便的创建表等操作了，如下：
类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="n">metadata</span><span class="o">=</span><span class="n">MetaData</span><span class="p">()</span>
</span><span class='line'><span class="n">user_table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;tf_user&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;user_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;email_address&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;password&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">40</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;first_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;last_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="s">&#39;created&#39;</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">user_table</span><span class="o">.</span><span class="n">create</span><span class="p">()</span><span class="c">#在数据库中创建相应的Table</span>
</span></code></pre></td></tr></table></div></figure>


<h3>表、列、约束</h3>

<p>Table.<strong>init</strong>(self, name, metadata,<em>args, **kwargs)
Column.<strong>init</strong>(self, name, type_, </em>args, **kwargs)</p>

<p>Primary keys</p>

<p>用primary_key=True来指定一个列的主键，例如</p>

<pre><code>Column('brand_id', Integer, ForeignKey('brand.id'),primary_key=True)
</code></pre>

<p>Foreign keys</p>

<p>Foreign keys是将一个表中的一行与另一个表中的一行进行联系，调用方式：
ForeignKey.<strong>init</strong>( self, col-umn, constraint=None, use_alter=False, name=None, onupdate=None, ondelete=None)
Column(&#8216;brand_id&#8217;, Integer, ForeignKey(&#8216;brand.id&#8217;))</p>

<h1>#</h1>

<p>和数据库连接，需要一个engine！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from sqlalchemy import create_engine
</span><span class='line'>engine = create_engine(’sqlite:///:memory:’, echo=True)</span></code></pre></td></tr></table></div></figure>


<p>引擎的方法：
engine.execute(&#8220;select 1&#8221;).scalar() 直接执行sql语句。
在使用ORM中，应该有两步，一是描述我们要处理的数据库，而是将我们的类和数据库中的table关联起来。在sqlalchemy中，这两步合二为一，使用declarative机制，在这个机制中，所有需要映射的类都是根据一个维护分类和映射关系的基类来的，这个基类就是declarative base class。</p>

<p>from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base() #创建这个base类</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu12.04下关闭触摸板]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/close-touchpad-in-ubuntu12-dot-04s/"/>
    <updated>2012-11-02T10:24:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/close-touchpad-in-ubuntu12-dot-04s</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo modprobe -r psmouse</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中文章信息头的最好形式]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/best-format-for-octopress-article/"/>
    <updated>2012-10-21T13:36:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/best-format-for-octopress-article</id>
    <content type="html"><![CDATA[<p>主要记录一下octopres中编辑文章头信息最好的格式。</p>

<blockquote><p>OS:Ubuntu12.04 2012年10月21日 第一版</p></blockquote>

<figure class='code'><figcaption><span>best format - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">layout</span><span class="p">:</span> <span class="n">post</span>
</span><span class='line'><span class="n">title</span><span class="p">:</span> <span class="s2">&quot;SEO for Octopress&quot;</span>  <span class="c1">#文章标题</span>
</span><span class='line'><span class="n">date</span><span class="p">:</span> <span class="mi">2012</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">22</span> <span class="mi">09</span><span class="p">:</span><span class="mi">55</span>  <span class="c1">#写作时间</span>
</span><span class='line'><span class="n">comments</span><span class="p">:</span> <span class="kp">true</span> <span class="c1">#允许评论</span>
</span><span class='line'><span class="n">categories</span><span class="p">:</span> <span class="o">[</span><span class="n">seo</span><span class="p">,</span><span class="n">octopress</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#多个分类标记</span>
</span><span class='line'><span class="n">tags</span><span class="p">:</span> <span class="o">[</span><span class="n">key1</span><span class="p">,</span><span class="n">key2</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.]</span> <span class="c1">#支持多个tag的功能</span>
</span><span class='line'><span class="n">keywords</span><span class="p">:</span> <span class="n">seo</span><span class="p">,</span><span class="n">octopress</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="c1">#关键字</span>
</span><span class='line'><span class="n">description</span><span class="p">:</span> <span class="err">“</span><span class="no">How</span> <span class="n">to</span> <span class="n">optimize</span> <span class="no">Octopress</span> <span class="k">for</span> <span class="no">SEO</span><span class="p">,</span><span class="no">Heroku</span><span class="err">”</span> <span class="c1">#文章描述，用于搜索引擎显示的内容</span>
</span><span class='line'><span class="o">---</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>其中，catagoies有两种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>categories: [cate1,cate2,...]
</span><span class='line'>
</span><span class='line'>categories:
</span><span class='line'>- cate1
</span><span class='line'>- cate2
</span><span class='line'>- ...</span></code></pre></td></tr></table></div></figure>


<p>tags的也有如上两种方式，<em>至于keywords项的作用，还暂时不知道</em>,但是按照我目前的想法，categories支持多个以后，和tags的功能的功能重合了，所以tags可以不要，倒是这个description相比较重要，有利于SEO，关于SEO可以参考：</p>

<blockquote><p><a href="http://zyzhang.github.com/blog/2012/09/03/blog-with-github-pages-and-jekyll-seo/">Github Pages + Jekyll搭建博客之SEO</a></p>

<p><a href="http://www.yatishmehta.in/seo-for-octopress">SEO for Octopress,Heroku</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[add tags for octopress]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/add-tags-for-octopress/"/>
    <updated>2012-10-21T13:27:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/add-tags-for-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在用Github搭建的Octopress博客中安装百度统计]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/install-baidu-analytics-on-octopress-which-based-on-github-pages/"/>
    <updated>2012-10-15T20:38:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/install-baidu-analytics-on-octopress-which-based-on-github-pages</id>
    <content type="html"><![CDATA[<p>我发现用Github搭建的octopress有个缺点就是貌似不怎么容易被搜索引擎检索到,这个先不管了,以后再折腾.这里主要记录一下如何在octopress中安装百度统计.因为百度统计不是octopress默认支持的,不像Google分析那样直接改了配置就能用,所以需要手动安装.</p>

<blockquote><p>OS:Ubuntu 12.04 2012年10月15日 第一版</p></blockquote>

<!--more-->


<h2>进入百度统计,添加站点,获取站点代码.</h2>

<p>主要是一段javascript的代码,在有访问时通过这段代码将信息发送给百度统计的分析端.我的代码如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_bdhmProtocol</span> <span class="o">=</span> <span class="p">((</span><span class="s2">&quot;https:&quot;</span> <span class="o">==</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="p">)</span> <span class="o">?</span> <span class="s2">&quot; https://&quot;</span> <span class="o">:</span> <span class="s2">&quot; http://&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">unescape</span><span class="p">(</span><span class="s2">&quot;%3Cscript src=&#39;&quot;</span> <span class="o">+</span> <span class="nx">_bdhmProtocol</span> <span class="o">+</span> <span class="s2">&quot;hm.baidu.com/h.js%3F3e617f2de1bb9051b3b53a2ac839280c&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加代码到Octopres</h2>

<p>因为Octopress不是纯html,用了CSS,所以在<code>source/index.html</code>中没有Body段,整个界面大致分为header,navgiation,body,footer四个部分,所以我们把代码放在footber里面合适一点.进入<code>source/_includes</code>目录,新建文件<code>baidu_analytics.html</code>,在其中复制之前得到的统计代码.</p>

<p>随后更改<code>source/_includes</code>下的<code>after_footer.html</code>文件,增加一行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% include baidu_analytics.html %\} ##去掉反斜线\</span></code></pre></td></tr></table></div></figure>


<h2>测试</h2>

<p>这里已经安装完成,进入<a href="http://tongji.baidu.com">百度统计后台</a>进行代码安装检查,检测到代码安装成功就OK了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[improve octopress theme]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/improve-octopress-theme/"/>
    <updated>2012-10-15T19:08:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/improve-octopress-theme</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中的写作效果]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/octopress-and-markdown-style/"/>
    <updated>2012-10-15T13:29:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/octopress-and-markdown-style</id>
    <content type="html"><![CDATA[<p>关于如何在octopress中使用插件或者markdown语法营造出特定的代码效果,我折腾了好久,网上大多没有比较基础易懂的教程,所以今天对于markdown语法和octopress的写作效果做一个总结,方便以后查找.这其中也包含了对octopress首页中写作插件的翻译.</p>

<blockquote><p>About: OS:Win 7 2012年10月15日，第一版。</p></blockquote>

<!--more-->


<h3>首页文章不全部显示,而显示Read On</h3>

<p>在文章中合适的地方加入<code>&lt;!--more--&gt;</code>就可以了.</p>

<h3>给文字加上方块</h3>

<p>示例效果:<code>这是一个示例效果</code></p>

<p>只需要在`这里是你的文字`中加入你的文字就可以了.(用键盘ESC键下面的键包裹文字)</p>

<h3>引用块</h3>

<p>示例效果:</p>

<blockquote><p>这是一个引用块</p></blockquote>

<p>有两种实现方式:一个利用markdown自带语法:<code>&gt;号后面紧跟你的文字</code>.一种是利用插件代码(去掉下面的反斜线\).</p>

<pre><code>{\% blockquote %\}

这里是你的引用文字

{\% endblockquote %\}
</code></pre>

<h3>插入代码</h3>

<p>示例效果:</p>

<pre><code>这里是代码插入示例
</code></pre>

<p>也是两种实现方式,一是利用markdown,方法是空出一行,四个空格,再加代码内容,如下:</p>

<pre><code>这里空出一行
四个空格后跟代码块
这里再空出一行
</code></pre>

<p>第二个方式是利用octopress的插件实现代码插入,功能更加全面(去掉以下的反斜线\).</p>

<pre><code>{\% codeblock %\}

这里是你的代码

{\% endcodeblock %\}
</code></pre>

<h3>插入图片</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7下Vim设置Python开发环境]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev/"/>
    <updated>2012-10-11T19:52:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev</id>
    <content type="html"><![CDATA[<p>最近用python写代码，条件有限，懒得用eclipse，遂用vim来做。网上搜了下vim支持python开发的方法，一步一步的来有点麻烦，想起以前有个脚本，稍加修改就OK了，在此与大家分享，功能上不只是支持python,常用的都支持，支持taglist以及minibuffer外加nerdtree（树形显示目录），应该说相当完善了，整个过程差不多10分钟搞定。</p>

<!--more-->


<blockquote><p>About:
OS:Win 7
2012年10月11日，第一版。</p></blockquote>

<h2>下载Vim7</h2>

<p>前往<a href="http://www.vim.org/" title="Vim下载">Vim下载</a>下载最新的Vim7.</p>

<h2>下载IDE脚本</h2>

<p>前往<a href="http://code.google.com/p/vimide/">Vim-IDE</a>下载vimide for windows，按照里面操作执行，只是简单的复制过程。</p>

<h2>更新Vim安装目录下的_vimrc文件</h2>

<figure class='code'><figcaption><span>_vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;设置文件编码</span>
</span><span class='line'><span class="s2">set fileencodings=utf-8,cp936,ucs-bom,gbk </span>
</span><span class='line'><span class="s2">set helplang=cn</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="no">ColorScheme</span><span class="err">设置色彩主题</span>
</span><span class='line'><span class="n">colorscheme</span> <span class="n">desert</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="n">shiftwidth</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">set</span> <span class="n">tabstop</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">set</span> <span class="n">expandtab</span>
</span><span class='line'><span class="n">set</span> <span class="n">nobackup</span>
</span><span class='line'><span class="n">set</span> <span class="n">noswapfile</span>
</span><span class='line'><span class="n">set</span> <span class="n">nowb</span>
</span><span class='line'><span class="n">set</span> <span class="n">backspace</span><span class="o">=</span><span class="n">start</span><span class="p">,</span><span class="n">indent</span><span class="p">,</span><span class="n">eol</span>
</span><span class='line'><span class="n">set</span> <span class="n">nu</span>
</span><span class='line'><span class="n">set</span> <span class="n">autoindent</span>
</span><span class='line'><span class="n">set</span> <span class="n">smartindent</span>
</span><span class='line'><span class="n">set</span> <span class="n">wrap</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;设置鼠标</span>
</span><span class='line'><span class="s2">set mouse=a</span>
</span><span class='line'>
</span><span class='line'><span class="s2">set noerrorbells</span>
</span><span class='line'><span class="s2">set novisualbell</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">语法高亮</span>
</span><span class='line'><span class="n">syntax</span> <span class="n">on</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;设置自动补全</span>
</span><span class='line'><span class="s2">filetype plugin on</span>
</span><span class='line'><span class="s2">filetype indent on</span>
</span><span class='line'><span class="s2">set completeopt=longest,menu</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">自动补全命令时候使用菜单式匹配列表</span>
</span><span class='line'><span class="n">set</span> <span class="n">wildmenu</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">ruby</span><span class="p">,</span><span class="n">eruby</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">rubycomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">python</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">pythoncomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">javascript</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javascriptcomplete</span><span class="c1">#CompleteJS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">html</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">htmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">css</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">csscomplete</span><span class="c1">#CompleteCSS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">xml</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">xmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">java</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javacomplete</span><span class="c1">#Complet</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;NERDTree可以树形显示目录,Taglist显示Tags列表</span>
</span><span class='line'><span class="s2">&quot;</span><span class="no">Ctrl</span><span class="o">+</span><span class="n">w</span><span class="err">：打开文件浏览</span> <span class="no">Ctrl</span><span class="o">+</span><span class="n">t</span><span class="err">：打开</span><span class="no">Taglist</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span> <span class="ss">:NERDTree</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">t</span><span class="o">&gt;</span> <span class="ss">:TlistToggle</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">vmap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">c</span><span class="o">&gt;</span> <span class="s2">&quot;+y</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let Tlist_Ctags_Cmd=&#39;ctags.exe&#39;</span>
</span><span class='line'><span class="s2">let Tlist_Show_One_File = 1</span>
</span><span class='line'><span class="s2">let Tlist_Exit_OnlyWindow=1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span><span class="err">存放</span><span class="n">tags</span><span class="err">的目录，</span><span class="n">ctags</span> <span class="o">-</span><span class="n">R</span><span class="err">后生成的</span><span class="n">tags</span><span class="err">所在目录</span>
</span><span class='line'><span class="n">set</span> <span class="n">tags</span><span class="o">=</span><span class="n">C</span><span class="p">:\</span><span class="no">Users</span><span class="p">\</span><span class="n">lusky</span><span class="p">\</span><span class="n">quantum</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapWindowNavVim</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapWindowNavArrows</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplMapCTabSwitchBufs</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">g</span><span class="ss">:miniBufExplModSelTarget</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PHP支持,不需要的话可以不要</span>
</span><span class='line'><span class="s2">inoremap &lt;C-P&gt; &lt;ESC&gt;:call PhpDocSingle()&lt;CR&gt;i </span>
</span><span class='line'><span class="s2">nnoremap &lt;C-P&gt; :call PhpDocSingle()&lt;CR&gt; </span>
</span><span class='line'><span class="s2">vnoremap &lt;C-P&gt; :call PhpDocRange()&lt;CR&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<h2>下载更适合Python的自动补全插件</h2>

<p>下载pydiction，解压后有4个文件，拷贝python_pydiction.vim和complete-dict到ftplugin目录，修改_vimrc</p>

<figure class='code'><figcaption><span>_vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;Pydiction插件设置</span>
</span><span class='line'><span class="s2">let g:pydiction_location = &#39;D:\Program Files\Vim</span><span class="se">\v</span><span class="s2">im73</span><span class="se">\f</span><span class="s2">tplugin\complete-dict&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最后,给一张图吧:</h2>

<p><img src="http://wangchang.github.com/images/2012-10/2012-10-11-setup-vim-for-python.jpg"></p>

<p>也可以到我的github博客的source分支上下载。位于<code>blog/attachments/2012-10/_vimrc</code>下载.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu 12.04下用Github安装和维护Octopress]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/install-and-maintain-octopress-in-ubuntu-12-dot-04/"/>
    <updated>2012-10-08T20:45:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/install-and-maintain-octopress-in-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>其实之前用Github+Octopress架设博客用的是Win7,但是始终解决不了中文问题,今天换回Ubuntu,顺利解决,这里就干脆用Ubtuntu来做一个记录吧.</p>

<h2>1 安装Ruby环境</h2>

<p>利用RVM安装ruby,RVM管理Ruby的话感觉更爽一点,自己也懒得编译了.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:apt-get install curl git
</span><span class='line'>root@Node1:curl -L get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>根据RVM的要求,还需要将用户加入组以及更新配置.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:gpasswd -a root rvm
</span><span class='line'>root@Node1:source /etc/profile.d/rvm.sh</span></code></pre></td></tr></table></div></figure>


<p>安装编译依赖以及Ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@Node1:apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g
</span><span class='line'>zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf
</span><span class='line'>root@Node1:rvm install 1.9.2</span></code></pre></td></tr></table></div></figure>


<p>OK,环境安装完成.</p>

<h2>2 安装Octopress以及组件</h2>

<p>先通过git克隆octopress的代码.再安装相应的组件.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>然后安装默认主题:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>3 设置Github</h2>

<p>这一步是以后维护的关键主要有以下步骤:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages 设置于github的关联
</span><span class='line'>rake generate 生成静态页面
</span><span class='line'>rake deploy 向github发送页面</span></code></pre></td></tr></table></div></figure>


<p>注意,所有的操作都应该是在octopress的源码中进行,rake deploy只是将生成的静态页面发送到github的master分支.,所以最后我们需要将源码保存为source分支.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'commit message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>以后维护的时候记得需要先checkout到source分支才行.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Blog Starts]]></title>
    <link href="http://wangchang.github.com/blog/2012/09/my-new-blog-starts/"/>
    <updated>2012-09-29T01:46:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/09/my-new-blog-starts</id>
    <content type="html"><![CDATA[<p>this is my new blog.i will try some functions:</p>

<p>this is code block</p>

<figure class='code'><figcaption><span>This is code block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>


<p><img src="http://placekitten.com/890/280">
<img src="http://wangchang.github.com/images/2012-09-29-my-new-blog-starts-1.jpg"></p>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>




<!--more-->



]]></content>
  </entry>
  
</feed>
