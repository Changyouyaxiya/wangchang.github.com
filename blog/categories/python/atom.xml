<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | WangChang's Blog]]></title>
  <link href="http://wangchang.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://wangchang.github.com/"/>
  <updated>2012-11-21T14:13:02+08:00</updated>
  <id>http://wangchang.github.com/</id>
  <author>
    <name><![CDATA[Wang Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之Deploy(2)-实践]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-2/"/>
    <updated>2012-11-20T10:39:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-2</id>
    <content type="html"><![CDATA[<p>上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。</p>

<!--more-->


<h2>1 OpenStack Quantum配置文件api-paste.ini</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[composite:quantum]</span>
</span><span class='line'><span class="sr">use = egg:Paste#urlmap</span>
</span><span class='line'><span class="sr">/</span><span class="p">:</span> <span class="n">quantumversions</span>
</span><span class='line'><span class="sr">/v2.0: quantumapi_v2_0&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用</span><span class="n">composite</span><span class="err">分解机制，</span><span class="n">composite</span><span class="err">使用了</span><span class="n">usrlmap</span><span class="err">，</span><span class="n">xxxxx</span><span class="o">/</span><span class="n">xxx</span><span class="err">的</span><span class="no">API</span><span class="err">交给</span><span class="n">quantumversions</span><span class="err">处理。</span><span class="n">xxxx</span><span class="o">/</span><span class="n">v2</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">xxxx</span><span class="err">的</span><span class="no">API</span><span class="err">交给</span><span class="n">quantumapi_v2_0</span><span class="err">处理。</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[composite:quantumapi_v2_0]</span>
</span><span class='line'><span class="sr">use = call:quantum.auth:pipeline_factory</span>
</span><span class='line'><span class="sr">noauth = extensions quantumapiapp_v2_0</span>
</span><span class='line'><span class="sr">keystone = authtoken keystonecontext extensions quantumapiapp_v2_0&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">quantumapi_v2_0</span><span class="err">依然是一个分解组件，使用了</span><span class="n">quantum</span><span class="o">.</span><span class="n">auth</span><span class="err">模块下的</span><span class="n">pipeline_factory</span><span class="err">，对于这个</span><span class="n">factory</span><span class="err">，传递了两个参数，一个是</span><span class="n">noauth</span><span class="p">,</span><span class="err">一个是</span><span class="n">keystone</span><span class="err">。</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[filter:keystonecontext]</span>
</span><span class='line'><span class="sr">paste.filter_factory = quantum.auth:QuantumKeystoneContext.factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">对于</span><span class="n">keystonecontext</span><span class="err">，实际上是一个过滤器，使用了</span><span class="n">quantum</span><span class="o">.</span><span class="n">auth</span><span class="err">模块下的类</span><span class="no">QuantumKeystoneContext</span><span class="err">的</span><span class="n">factory</span><span class="err">函数</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[filter:authtoken]</span>
</span><span class='line'><span class="sr">paste.filter_factory = keystone.middleware.auth_token:filter_factory</span>
</span><span class='line'><span class="sr">auth_host = 127.0.0.1</span>
</span><span class='line'><span class="sr">auth_port = 35357</span>
</span><span class='line'><span class="sr">auth_protocol = http</span>
</span><span class='line'><span class="sr">admin_tenant_name = %SERVICE_TENANT_NAME%</span>
</span><span class='line'><span class="sr">admin_user = %SERVICE_USER%</span>
</span><span class='line'><span class="sr">admin_password = %SERVICE_PASSWORD%&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">定义了另外一个</span><span class="n">filter</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[filter:extensions]</span>
</span><span class='line'><span class="sr">paste.filter_factory = quantum.extensions.extensions:plugin_aware_extension_middleware_factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">定义了另外一个</span><span class="n">filter</span><span class="p">,</span><span class="err">这个</span><span class="n">filter</span><span class="err">是为了支持扩展</span><span class="n">quantum</span> <span class="n">api</span><span class="err">的</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:quantumversions]</span>
</span><span class='line'><span class="sr">paste.app_factory = quantum.api.versions:Versions.factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">核心的</span><span class="n">app</span><span class="err">部分，使用工厂函数，将</span><span class="n">app</span><span class="err">指向</span><span class="n">python</span><span class="err">代码。</span><span class="n">app_factory</span><span class="err">表明这个函数接收一系列参数，</span><span class="o">[</span><span class="no">DEFAULET</span><span class="o">]</span><span class="err">以及</span><span class="o">[</span><span class="n">app</span><span class="p">:</span><span class="o">]</span><span class="err">下面的，本部分本</span><span class="n">section</span><span class="err">没有参数，并返回一个函数对象。</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:quantumapiapp_v2_0]</span>
</span><span class='line'><span class="sr">paste.app_factory = quantum.api.v2.router:APIRouter.factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">同上</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们来总结一下，整个Quantum处理api的流程如下,其中，强调的部分为函数代码，其他为配置文件中的section部分。</p>

<p>对于路径为<code>/</code>类的API----quantumversions处理----调用<code>quantum.api.versions:Version</code>类的<code>factory函数</code>处理。</p>

<p>对于路径为<code>/2.0</code>类的API----quantumapi_v2_0处理----调用<code>quantum.auth</code>中的<code>pipeline_factory</code>处理,同时传递了两个参数noauth和keystone,类型为字典。
这个pipeline_factory中会读取另外一个变量CONF.auth（来自另外一个配置文件，不考虑），选择采用的认证方式，然后选择noauth或者keystone，并读取参数的值。
那么，就有两种情况：</p>

<p>noauth: 应用将会先经过extensions这个filter处理----调用了<code>quantum.extensions.extensions:plugin_aware_extension_middleware_factory</code>，用来处理扩展api请求，这是第一次包装----quantumapiapp_v2_0，这才是实际的WSGI应用，调用了<code>quantum.api.v2.router:APIRouter.factory</code>，并处理返回结果。</p>

<p>keystone：和上面类似，不同的是多了几个filter,authtoken keystonecontext extensions quantumapiapp_v2_0,并且在每个filter中可能还会有参数传递给这个fliter。</p>

<p>总的来说，通过pipeline装载多个filter,将最基本的app--APIRouter，层层包装，使其变为一个具有处理认证，扩展API等的应用（逻辑上看），filter的好处就是可以自定义，比如可以不要认证功能，这比写一个囊括全部功能的应用明显要好的多。</p>

<h2>2 代码实践</h2>

<h3>2.1 配置文件</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="no">DEFAULT</span><span class="o">]</span>
</span><span class='line'><span class="n">company</span> <span class="o">=</span> <span class="no">UESTC</span>
</span><span class='line'><span class="n">school</span> <span class="o">=</span> <span class="no">Commuication</span> <span class="ow">and</span> <span class="no">Information</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[composite:common]</span>
</span><span class='line'><span class="sr">use = egg:Paste#urlmap</span>
</span><span class='line'><span class="sr">/</span><span class="ss">:showversion</span>
</span><span class='line'><span class="sr">/detail:showdetail&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;[</span><span class="n">pipeline</span><span class="ss">:showdetail</span><span class="o">]</span>
</span><span class='line'><span class="n">pipeline</span> <span class="o">=</span> <span class="n">filter1</span> <span class="n">filter2</span> <span class="n">showstudetail</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[filter:filter1]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">filter1</span> <span class="n">deal</span> <span class="n">with</span> <span class="n">auth</span><span class="p">,</span><span class="n">read</span> <span class="n">args</span> <span class="n">below</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;paste.filter_factory = python_paste:AuthFilter.factory</span>
</span><span class='line'><span class="sr">user = admin</span>
</span><span class='line'><span class="sr">passwd = admin&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;[</span><span class="n">filter</span><span class="ss">:filter2</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;filter2 deal with time,read args below&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">paste</span><span class="o">.</span><span class="n">filter_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:LogFilter</span><span class="o">.</span><span class="n">factory</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;all value is string&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">date</span> <span class="o">=</span> <span class="mi">20121120</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:showstudetail]</span>
</span><span class='line'><span class="sr">name = wangchang</span>
</span><span class='line'><span class="sr">age = 23</span>
</span><span class='line'><span class="sr">paste.app_factory = python_paste:ShowStuDetail.factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;[</span><span class="n">app</span><span class="ss">:showversion</span><span class="o">]</span>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">paste</span><span class="o">.</span><span class="n">app_factory</span> <span class="o">=</span> <span class="n">python_paste</span><span class="ss">:ShowVersion</span><span class="o">.</span><span class="n">factory</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
从配置文件可以看出，这个程序会有如下操作：
*对于http://localhost/的访问，会调用showversion这个应用，应用读取ini文件中的version值并返回。__注意，在ini中的所有值都是字符串。</p>

<p>对于http://localhost/detail的访问，会先经过filter1以及filter2，这两个filter分别处理认证和LOG信息，他们会读取ini配置中的用户信息以及时间。最后才是交给showstudetail处理，showstudetail会读取ini中的用户信息并返回。__注意，使用多个filter的时候需要使用pipeline方式。</p>

<h3>2.2 代码</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">webob</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">webob</span> <span class="kn">import</span> <span class="n">Request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">webob</span> <span class="kn">import</span> <span class="n">Response</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">webob</span> <span class="kn">import</span> <span class="n">environ</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">paste.deploy</span> <span class="kn">import</span> <span class="n">loadapp</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref.simple_server</span> <span class="kn">import</span> <span class="n">make_server</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">AuthFilter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s">&#39;&#39;&#39;filter1,auth</span>
</span><span class='line'><span class="s">     1.factory read args and print,return self instance</span>
</span><span class='line'><span class="s">     2.call method return app</span>
</span><span class='line'><span class="s">     3.AuthFilter(app)</span>
</span><span class='line'><span class="s">  &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;this is Auth call filter1&#39;</span>
</span><span class='line'>      <span class="c">#pass environ and start_response to app</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">@classmethod</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&#39;&#39;&#39;global_conf and kwargs are dict&#39;&#39;&#39;</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;######filter1##########&#39;</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;global_conf type:&#39;</span><span class="p">,</span><span class="nb">type</span><span class="p">(</span><span class="n">global_conf</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;[DEFAULT]&#39;</span><span class="p">,</span><span class="n">global_conf</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;kwargs type:&#39;</span><span class="p">,</span><span class="nb">type</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;Auth Info&#39;</span><span class="p">,</span><span class="n">kwargs</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">AuthFilter</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">LogFilter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s">  filter2,Log</span>
</span><span class='line'><span class="s">  &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;This is call LogFilter filter2&#39;</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">@classmethod</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="c">#print type(global_conf)</span>
</span><span class='line'>      <span class="c">#print type(kwargs)</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;######filter2###########&#39;</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;[DEFAULT]&#39;</span><span class="p">,</span><span class="n">global_conf</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;Log Info&#39;</span><span class="p">,</span><span class="n">kwargs</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">LogFilter</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ShowStuDetail</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s">  app</span>
</span><span class='line'><span class="s">  &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">age</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;this is call ShowStuDetail&#39;</span>
</span><span class='line'>      <span class="c">#pprint(environ)</span>
</span><span class='line'>      <span class="c">#pprint environ</span>
</span><span class='line'>      <span class="n">start_response</span><span class="p">(</span><span class="s">&quot;200 OK&quot;</span><span class="p">,[(</span><span class="s">&quot;Content-type&quot;</span><span class="p">,</span><span class="s">&quot;text/plain&quot;</span><span class="p">)])</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;name: </span><span class="si">%s</span><span class="s"> age:</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">))</span>
</span><span class='line'>      <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;**********WSGI INFO***********</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">environ</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="s"> </span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">content</span><span class="p">)]</span> <span class="c">#return a list</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@classmethod</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="c">#self.name = kwargs[&#39;name&#39;]</span>
</span><span class='line'>      <span class="c">#self.age = kwargs[&#39;age&#39;]</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ShowStuDetail</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;age&#39;</span><span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ShowVersion</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s">  app</span>
</span><span class='line'><span class="s">  &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">version</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">version</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;this is call ShowVersion&#39;</span>
</span><span class='line'>      <span class="n">req</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span>
</span><span class='line'>      <span class="n">res</span> <span class="o">=</span> <span class="n">Response</span><span class="p">()</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;200 OK&#39;</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s">&quot;text/plain&quot;</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="c">#pprint(req.environ)</span>
</span><span class='line'>      <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'>      <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;*********WSGI INFO*********&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">environ</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>          <span class="n">content</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">res</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span><span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">@classmethod</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">factory</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">global_conf</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="c">#self.version = kwargs[&#39;version&#39;]</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ShowVersion</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;version&#39;</span><span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="s">&#39;&lt;strong&gt;main&lt;/strong&gt;&#39;</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">config</span> <span class="o">=</span> <span class="s">&quot;python_paste.ini&quot;</span>
</span><span class='line'> <span class="n">appname</span> <span class="o">=</span> <span class="s">&quot;common&quot;</span>
</span><span class='line'> <span class="n">wsgi_app</span> <span class="o">=</span> <span class="n">loadapp</span><span class="p">(</span><span class="s">&quot;config:</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">config</span><span class="p">),</span> <span class="n">appname</span><span class="p">)</span>
</span><span class='line'> <span class="n">server</span> <span class="o">=</span> <span class="n">make_server</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span><span class="mi">7070</span><span class="p">,</span><span class="n">wsgi_app</span><span class="p">)</span>
</span><span class='line'> <span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span><span class='line'> <span class="k">pass</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在程序中，对于web请求的处理，我分别采用了webob和普通WSGI定义的方式，后续我会补上webob的使用。</p>

<h3>2.3 结果</h3>

<p>先从服务端结果分析一下调用流程：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ubuntu:~/python$ python python_paste.py&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h6>filter1&lt;/h6>
</span><span class='line'>
</span><span class='line'>&lt;p>global_conf type: &lt;type 'dict'>
</span><span class='line'>[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here': '/home/wachang/python', '&lt;strong>file&lt;/strong>': '/home/wachang/python/python_paste.ini'}
</span><span class='line'>kwargs type: &lt;type 'dict'>
</span><span class='line'>Auth Info {'passwd': 'admin', 'user': 'admin'}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h6>filter2&lt;/h6>
</span><span class='line'>
</span><span class='line'>&lt;p>[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here': '/home/wachang/python', '&lt;strong>file&lt;/strong>': '/home/wachang/python/python_paste.ini'}
</span><span class='line'>Log Info {'date': '20121120'}
</span><span class='line'>以上是PD载入应用时，调用filter的factory方法输出的结果，可以看到，此读出了相关的变量信息。&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:23:40] "GET / HTTP/1.1" 200 2938
</span><span class='line'>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:23:40] "GET /favicon.ico HTTP/1.1" 200 2889
</span><span class='line'>以上是接收/请求，因为没有使用filter，直接交予showversion应用处理，并返回。&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>this is Auth call filter1
</span><span class='line'>This is call LogFilter filter2
</span><span class='line'>this is call ShowStuDetail
</span><span class='line'>localhost - - [21/Nov/2012 13:24:23] "GET /detail HTTP/1.1" 200 3016
</span><span class='line'>this is call ShowVersion
</span><span class='line'>localhost - - [21/Nov/2012 13:24:24] "GET /favicon.ico HTTP/1.1" 200 2889
</span><span class='line'>filter的调用时重点啊，可以看到，调用的顺序和pipeline中一样。最后才调用应用。</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>需要继续折腾的话，就看看<a href="http://docs.webob.org/en/latest/do-it-yourself.html">webob:do-it-yourselfrself</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python.Paste指南之Deploy(1)-概念]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1/"/>
    <updated>2012-11-17T13:24:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/python-paste-one-deploy-1</id>
    <content type="html"><![CDATA[<p>Paste.Deploy主要是用来载入WSGI中的Web App使用，其核心函数是loadapp(),下文中PD就指代Paste.Deploy。</p>

<blockquote><p>OS:Ubuntu12.04 2012年11月17日 第一版
主要是对官方文档的一个翻译，外加自己的一些理解
本文的Paste.Deploy使用主要是针对WSGI</p></blockquote>

<h2>1 简介及安装</h2>

<p>Paste Deployment是一种机制，通过loadapp函数和一个配置文件或者egg包来载入WSGI应用。安装很简单，如下两种方式：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install PasteDeploy</span></code></pre></td></tr></table></div></figure></notextile></div>
或者可以从github上进行源码安装
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hg clone http://bitbucket.org/ianb/pastedeploy
</span><span class='line'>$ cd pastedeploy
</span><span class='line'>$ sudo python setup.py develop</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->


<h2>2 配置文件Config Flie</h2>

<p>一个配置文件后缀为ini，内容被分为很多段（section），PD只关心带有前缀的段，比如<code>[app:main]</code>或者<code>[filter:errors]</code>，总的来说，一个section的标识就是<code>[type:name]</code>,不是这种类型的section将会被忽略。</p>

<p>一个section的内容是以<code>键=值</code>来标示的。#是一个注释。在段的定义中，有以下几类：</p>

<ul>
<li><p>[app:main]:定义WSGI应用，main表示只有一个应用，有多个应用的话main改为应用名字</p></li>
<li><p>[server:main]:定义WSGI的一个server。</p></li>
<li><p>[composite:xxx]：表示需要将一个请求调度定向（dispatched）到多个,或者多种应用上。以下是一个简单的例子，例子中，使用了composite，通过urlmap来实现载入多应用。</p></li>
<li><p>[fliter:]：定义“过滤器”，将应用进行进一步的封装。</p></li>
<li><p>[DEFAULT]：定义一些默认变量的值。</p></li>
</ul>


<p>以下是一个例子：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:home]</span>
</span><span class='line'><span class="sr">use = egg:Paste#static</span>
</span><span class='line'><span class="sr">document_root = %(here)s/</span><span class="n">htdocs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[filter-app:blog]</span>
</span><span class='line'><span class="sr">use = egg:Authentication#auth</span>
</span><span class='line'><span class="sr">next = blogapp</span>
</span><span class='line'><span class="sr">roles = admin</span>
</span><span class='line'><span class="sr">htpasswd = /</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:blogapp]</span>
</span><span class='line'><span class="sr">use = egg:BlogApp</span>
</span><span class='line'><span class="sr">database = sqlite:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:wiki]</span>
</span><span class='line'><span class="sr">use = call:mywiki.main:application</span>
</span><span class='line'><span class="sr">database = sqlite:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
下面会进行分段的讲解</p>

<h3>2.1 composite</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">composite</span><span class="ss">:main</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#urlmap</span>
</span><span class='line'><span class="sr">/ = home</span>
</span><span class='line'><span class="sr">/</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>
</span><span class='line'><span class="sr">/wiki = wiki</span>
</span><span class='line'><span class="sr">/</span><span class="n">cms</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:cms</span><span class="o">.</span><span class="n">ini</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这是一个composite段，表示这将会根据一些条件将web请求调度到不同的应用。<code>use = egg:Paste#urlmap</code>表示我们奖使用<code>Paste</code>egg包中<code>urlmap</code>来实现composite，这一个段(urlmap)可以算是一个通用的composite程序了。根据web请求的path的前缀进行一个到应用的映射(map)。这些被映射的程序就包括blog,home,wiki,config:cms.ini（映射到了另外一个配置文件，PD再根据这个文件进行载入）</p>

<h3>2.2 App type1</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:home</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(here)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
app是一个callable object，接受的参数(environ,start_response)，这是paste系统交给application的，符合WSGI规范的参数. app需要完成的任务是响应envrion中的请求，准备好响应头和消息体，然后交给start_response处理，并返回响应消息体。<code>egg:Paste#static</code>也是Paste包中的一个简单程序，它只处理静态文件。它需要一个配置文件document_root,后面的值可以是一个变量,形式为%（var）s相应的值应该在[DEFAULT]字段指明以便Paste读取。比如：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:test</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Paste</span><span class="c1">#static</span>
</span><span class='line'><span class="n">document_root</span> <span class="o">=</span> <span class="sx">%(path)</span><span class="n">s</span><span class="o">/</span><span class="n">htdocs</span>
</span><span class='line'><span class="o">[</span><span class="no">DEFAULT</span><span class="o">]</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="sr">/etc/</span><span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>2.3 fliter</h3>

<p>filter是一个callable object，其唯一参数是(app)，这是WSGI的application对象，filter需要完成的工作是将application包装成另一个application（“过滤”），并返回这个包装后的application。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">filter</span><span class="o">-</span><span class="n">app</span><span class="ss">:blog</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">egg</span><span class="ss">:Authentication</span><span class="c1">#auth</span>
</span><span class='line'><span class="k">next</span> <span class="o">=</span> <span class="n">blogapp</span>
</span><span class='line'><span class="n">roles</span> <span class="o">=</span> <span class="n">admin</span>
</span><span class='line'><span class="n">htpasswd</span> <span class="o">=</span> <span class="sr">/home/me</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">htpasswd</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:blogapp]</span>
</span><span class='line'><span class="sr">use = egg:BlogApp</span>
</span><span class='line'><span class="sr">database = sqlite:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">blog</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>[filter-app:blog]</code>fliter-app字段表明你希望对某个应用进行包装，需要包装的应用通过next指明（表明在下一个段中），这个字段的意思就是，在正式调用blogapp之前，我会调用egg:Authentication#auth进行一个用户的验证，随后才会调用blogapp进行处理。后面的[app:blogapp]则是定义了blogapp，并指明了需要的database参数。</p>

<h3>2.4 App type2</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:wiki</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">call</span><span class="ss">:mywiki</span><span class="o">.</span><span class="n">main</span><span class="ss">:application</span>
</span><span class='line'><span class="n">database</span> <span class="o">=</span> <span class="n">sqlite</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">wiki</span><span class="o">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这个段和之前的app段定义类似，不同的是对于wiki这个应用，我们没有使用egg包，而是直接对mywiki.main这个模块中的application对象使用了call方法。python，中一切皆对象，作为WSGI app的可以是一个函数，一个类，或者一个实例，使用call的话，相应的函数，类，实例中必须实现<strong>call</strong>()方法。此类app的格式用冒号分割: <code>call(表示使用call方法):模块的完成路径名字:应用变量的完整名字</code></p>

<h2>3 基本使用</h2>

<p>PD的主要使用就是通过读取配置文件载入WSGI应用。如下：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from paste.deploy import loadapp
</span><span class='line'>wsgi_app = loadapp('config:/path/to/config.ini')</span></code></pre></td></tr></table></div></figure></notextile></div>
注意，这里需要指明绝对路径。</p>

<h2>4 更多关于配置文件</h2>

<h3>4.1 App</h3>

<p>单个配置文件中可以定义多个应用个，每个应用有自己独立的段。应用的定义以[app:name]的格式，[app:main]表示只有一个应用。应用的定义支持以下五种格式：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>- awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="n">app</span><span class="ss">:myapp</span><span class="o">]</span>
</span><span class='line'><span class="n">use</span> <span class="o">=</span> <span class="n">config</span><span class="ss">:another_config_file</span><span class="o">.</span><span class="n">ini</span><span class="c1">#app_name&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用另外一个配置文件</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:myotherapp]</span>
</span><span class='line'><span class="sr">use = egg:MyApp&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用</span><span class="n">egg</span><span class="err">包中的内容</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:mythirdapp]</span>
</span><span class='line'><span class="sr">use = call:my.project:myapplication&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用模块中的</span><span class="n">callable</span><span class="err">对象</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:mylastapp]</span>
</span><span class='line'><span class="sr">use = myotherapp&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用另外一个</span><span class="n">section</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[app:myfacapp]</span>
</span><span class='line'><span class="sr">paste.app_factory = myapp.modulename:app_factory&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">使用工厂函数</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其中，最后一种方式，将一个app指向了某些python代码。此模式下，必须执行app协议，以app_factory表示，后面的值需要import的东西，在这个例子中myapp.modulename被载入，并从其中取得了app_factory的实例。</p>

<p>app_factory是一个callable object，其接受的参数是一些关于application的配置信息：<code>(global_conf,**kwargs)</code>，<code>global_conf</code>是在ini文件中default section中定义的一系列key-value对，而<code>**kwargs</code>，即一些本地配置，是在ini文件中，app:xxx section中定义的一系列key-value对。app_factory返回值是一个application对象</p>

<p>在app的配置中，use参数以后配置就算结束了。其余的键值参数将会作为参数，传递到factory中，如下：</p>

<pre><code>[app:blog]
use = egg:MyBlog
database = mysql://localhost/blogdb #这是参数
blogname = This Is My Blog! #这是参数
</code></pre>

<h3>4.2 全局配置</h3>

<p>全局配置主要是用于多个应用共用一些变量，这些变量我们规定放在段[DEFAULT]中，如果需要覆盖，可以在自己的app中重新定义，如下：</p>

<pre><code>[DEFAULT]
admin_email = webmaster@example.com
[app:main]
use = ...
set admin_email = bob@example.com
</code></pre>

<h3>4.3 composite app</h3>

<p>composite是一个运行着像是app，但是实际上是由多个应用组成的。urlmap就是composite app的一个例子，url不同的path对应了不同的应用。如下：</p>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = mainapp
/files = staticapp

[app:mainapp]
use = egg:MyApp

[app:staticapp]
use = egg:Paste#static
document_root = /path/to/docroot
</code></pre>

<p>在loadapp函数的执行中，composite app被实例化，它同时还会访问配置文件中定义的其他应用。</p>

<h3>4.4 app定义高级用法</h3>

<p>在app段中，你可以定义fliters和servers，通过<code>fliter:</code>和<code>server:</code> PD通过loadserver和loadfilter函数进行调用，工作机制都一样，返回不同的对象。</p>

<h4>4.4.1 filter composition</h4>

<p>应用filter的方式很多，重要的是看你filter的数量和组织形式。下面会一一介绍应用fliter的几种方式：</p>

<p>1.使用<code>filter-with</code></p>

<pre><code>[app:main]
use = egg:MyEgg
filter-with = printdebug

[filter:printdebug]
use = egg:Paste#printdebug
# and you could have another filter-with here, and so on...
</code></pre>

<p>2.使用<code>fliter-app</code></p>

<pre><code>[fliter-app:printdebug]
use = egg:Paste
next = main

[app:main]
use = egg:MyEgg
</code></pre>

<p>3.使用pipeline</p>

<p>当使用多个filter的时候需要使用pipeline的方式，它需要提供一个key参数pipeline,后面的值是一个列表，最后以应用结尾。如下：</p>

<pre><code>[pipeline:main]
pipeline = filter1 egg:FilterEgg#filter2 filter3 app

[filter:filter1]
...
</code></pre>

<p>假设在ini文件中, 某条pipeline的顺序是filter1, filter2, filter3，app, 那么，最终运行的app_real是这样组织的：
app_real = filter1(filter2(filter3(app)))</p>

<p>在app真正被调用的过程中，filter1._<em>call_</em>(environ,start_response)被首先调用，若某种检查未通过，filter1做出反应；否则交给filter2._<em>call_</em>(environ,start_response)进一步处理，若某种检查未通过，filter2做出反应，中断链条，否则交给filter3._<em>call_</em>(environ,start_response)处理，若filter3的某种检查都通过了，最后交给app._<em>call_</em>(environ,start_response)进行处理。</p>

<h3>4.5 读取配置文件</h3>

<p>如果希望在不创建应用的情况下得到配置文件，可以使用appconfig(uri)函数，将会以字典形式返回使用的配置。这个字典包括了全局很本地的配置信息，所以可以通过属性方法获得相应的attributes （.local_conf and .global_conf）</p>

<h2>5 其他</h2>

<h3>5.1 如何引用Egg包</h3>

<p>egg是python的一个包，pip easy_install等都是安装egg包的方式。关注egg包要注意：
+某一egg包是有标准说明的</p>

<p>python setup.py name
+有entry point，不用太在意，这个只是说明调用程序的参数。</p>

<h3>5.2 定义factory函数</h3>

<p>工厂函数的定义还是遵循之前提到的应用的协议。目前，用于工厂函数的协议有以下：</p>

<p>*paste.app_factory</p>

<p>*paste.composite_factory</p>

<p>*paste.filter_factory</p>

<p>*paste.server_factory</p>

<p>所有的这些都希望有一个含有__call__方法的（函数，方法，类）。</p>

<p>1.<code>paste.app_factory</code></p>

<pre><code>def app_factory(global_config, **local_conf):
    return wsgi_app
</code></pre>

<p>global_config是一个字典，而local_conf则是关键字参数。返回一个wsgi_app（含有<strong>call</strong>方法。）</p>

<p>2.paste.composite_factory`</p>

<pre><code>def composite_factory(loader, global_config, **local_conf):
   return wsgi_app
</code></pre>

<p>loader是一个对象，有几个有趣的方法,get_app(name_or_uri, global_conf=None)根据name返回一个wsgi应用，get_filter（）和get_server（）也是一样。看一个更加复杂的例子，举例一个pipeline应用：</p>

<pre><code>def pipeline_factory(loader, global_config, pipeline):
    # space-separated list of filter and app names:
    pipeline = pipeline.split()
    filters = [loader.get_filter(n) for n in pipeline[:-1]]
    app = loader.get_app(pipeline[-1])
    filters.reverse() # apply in reverse order!
    for filter in filters:
      app = filter(app)
    return app
</code></pre>

<p>相应的配置文件如下：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[composite:main]
</span><span class='line'>use = &lt;pipeline_factory_uri>
</span><span class='line'>pipeline = egg:Paste#printdebug session myapp&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[filter:session]
</span><span class='line'>use = egg:Paste#session
</span><span class='line'>store = memory&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[app:myapp]
</span><span class='line'>use = egg:MyApp</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>3.<code>paste.filter_factory</code>
fliter的工厂函数和app的共产函数类似，除了它返回的是一个filter,fliter是一个仅仅把一个wsgi应用作为唯一参数的callable对象，返回一个被filter了的应用。
以下是一个例子，这个filter会检查CGI中REMOTE_USER变量是否存在，并创建一个简单的认证过滤器。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def auth_filter_factory(global_conf, req_usernames):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code># space-separated list of usernames:
</span><span class='line'>req_usernames = req_usernames.split()
</span><span class='line'>def filter(app):
</span><span class='line'>    return AuthFilter(app, req_usernames)
</span><span class='line'>return filter
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>class AuthFilter(object):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>def __init__(self, app, req_usernames):
</span><span class='line'>    self.app = app
</span><span class='line'>    self.req_usernames = req_usernames
</span><span class='line'>
</span><span class='line'>def __call__(self, environ, start_response):
</span><span class='line'>    if environ.get('REMOTE_USER') in self.req_usernames:
</span><span class='line'>        return self.app(environ, start_response)
</span><span class='line'>    start_response(
</span><span class='line'>        '403 Forbidden', [('Content-type', 'text/html')])
</span><span class='line'>    return ['You are forbidden to view this resource']
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>4.<code>paste.filter_app_factory</code>
和paste.filter_factory类似，接受一个wsgi应用参数，返回一个WSGI应用，所以如果改变以上代码的：</p>

<pre><code>class AuthFilter(object):
    def __init__(self, app, global_conf, req_usernames):
        ....
</code></pre>

<p>那么，类 AuthFilter就会作为一个filter_app_factory函数使用。</p>

<p>5.<code>paste.server_factory</code></p>

<p>与以上不同的是，函数返回的是一个server,一个server也是一个callable对象，以一个WSGI应用作为参数，而后为这个应用服务。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">server_factory</span><span class="p">(</span><span class="n">global_conf</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">serve</span><span class="p">(</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Server</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span><span class='line'><span class="k">return</span> <span class="n">serve</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Server的实现用户可以自定义，可以参考python包wsgiref</p>

<p>6.<code>paste.server_runner</code>
与 paste.server_factory类似，不同的是参数格式。</p>

<h2>6 其他一些值得讨论的问题</h2>

<p>ConfigParser（PD底层用到这个来解析ini文件）解析ini文件不是很有效率，是否需要更改？</p>

<p>在配置文件中的对象是否需要是python风格的，而不是字符串的形式？</p>

<blockquote><p>Paste Deployment currently does not require other parts of Paste, and is distributed as a separate package.</p></blockquote>

<p><a href="http://pythonpaste.org/deploy/#defining-factories">http://pythonpaste.org/deploy/#defining-factories</a>
<a href="http://pythonpaste.org/deploy/">http://pythonpaste.org/deploy/</a>
<a href="http://pythonpaste.org/script/#paster-serve">http://pythonpaste.org/script/#paster-serve</a>
<a href="http://kevinzheng.sinaapp.com/?p=104">http://kevinzheng.sinaapp.com/?p=104</a>
<a href="http://blog.csdn.net/icycolawater/article/details/7045287">http://blog.csdn.net/icycolawater/article/details/7045287</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Sqlalchemy指南(一)]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1/"/>
    <updated>2012-11-14T15:11:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1</id>
    <content type="html"><![CDATA[<p>最近项目需要学习sqlalchemy，对于这个神器，网上的教程实在太少了，而且版本太老。于是只好自己慢慢读，以此系列做一个记录的吧！</p>

<blockquote><p>Sqlalchemy version:0.8.b1
使用sqlite或者mysql来练习
主要是参照官方文档，以及实际的使用经验
OS:Win7 or Ubuntu12.04</p></blockquote>

<!--more-->


<h2>Sqlalchemy的架构图</h2>

<p>关于这个架构图，文档解释如下：</p>

<blockquote><p>InSQLAlchemy ORM, the Object Relational Mapper is introduced and fully described. New users should begin with theObject Relational Tutorial.</p>

<p>InSQLAlchemy Core, the breadth of SQLAlchemy’s SQL and database integration and description services are doc-umented, the core of which is the SQL Expression language. The SQL Expression Language is a toolkit all its own, independent of the ORM package, which can be used to construct manipulable SQL expressions which can be programmatically constructed, modified, and executed, returning cursor-like result sets.</p></blockquote>

<h2>环境准备</h2>

<p>pip install 或者 'easy install'都可以</p>

<h1>#</h1>

<p>和数据库连接，需要一个engine！
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from sqlalchemy import create_engine
</span><span class='line'>engine = create_engine(’sqlite:///:memory:’, echo=True)</span></code></pre></td></tr></table></div></figure></notextile></div>
引擎的方法：
engine.execute("select 1").scalar() 直接执行sql语句。
在使用ORM中，应该有两步，一是描述我们要处理的数据库，而是将我们的类和数据库中的table关联起来。在sqlalchemy中，这两步合二为一，使用declarative机制，在这个机制中，所有需要映射的类都是根据一个维护分类和映射关系的基类来的，这个基类就是declarative base class。</p>

<p>from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base() #创建这个base类</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7下Vim设置Python开发环境]]></title>
    <link href="http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev/"/>
    <updated>2012-10-11T19:52:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/10/setup-vim-for-python-dev</id>
    <content type="html"><![CDATA[<p>最近用python写代码，条件有限，懒得用eclipse，遂用vim来做。网上搜了下vim支持python开发的方法，一步一步的来有点麻烦，想起以前有个脚本，稍加修改就OK了，在此与大家分享，功能上不只是支持python,常用的都支持，支持taglist以及minibuffer外加nerdtree（树形显示目录），应该说相当完善了，整个过程差不多10分钟搞定。</p>

<!--more-->


<blockquote><p>About:
OS:Win 7
2012年10月11日，第一版。</p></blockquote>

<h2>下载Vim7</h2>

<p>前往<a href="http://www.vim.org/" title="Vim下载">Vim下载</a>下载最新的Vim7.</p>

<h2>下载IDE脚本</h2>

<p>前往<a href="http://code.google.com/p/vimide/">Vim-IDE</a>下载vimide for windows，按照里面操作执行，只是简单的复制过程。</p>

<h2>更新Vim安装目录下的_vimrc文件</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&quot;设置文件编码</span>
</span><span class='line'><span class="sr">set fileencodings=utf-8,cp936,ucs-bom,gbk</span>
</span><span class='line'><span class="sr">set helplang=cn&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="s2">&quot;ColorScheme设置色彩主题</span>
</span><span class='line'><span class="s2">colorscheme desert&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;set shiftwidth=2</span>
</span><span class='line'><span class="s2">set tabstop=2</span>
</span><span class='line'><span class="s2">set expandtab</span>
</span><span class='line'><span class="s2">set nobackup</span>
</span><span class='line'><span class="s2">set noswapfile</span>
</span><span class='line'><span class="s2">set nowb</span>
</span><span class='line'><span class="s2">set backspace=start,indent,eol</span>
</span><span class='line'><span class="s2">set nu</span>
</span><span class='line'><span class="s2">set autoindent</span>
</span><span class='line'><span class="s2">set smartindent</span>
</span><span class='line'><span class="s2">set wrap&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;&quot;</span><span class="err">设置鼠标</span>
</span><span class='line'><span class="n">set</span> <span class="n">mouse</span><span class="o">=</span><span class="n">a</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;set noerrorbells</span>
</span><span class='line'><span class="sr">set novisualbell&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="s2">&quot;语法高亮</span>
</span><span class='line'><span class="s2">syntax on&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;&quot;</span><span class="err">设置自动补全</span>
</span><span class='line'><span class="n">filetype</span> <span class="n">plugin</span> <span class="n">on</span>
</span><span class='line'><span class="n">filetype</span> <span class="n">indent</span> <span class="n">on</span>
</span><span class='line'><span class="n">set</span> <span class="n">completeopt</span><span class="o">=</span><span class="n">longest</span><span class="p">,</span><span class="n">menu</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&quot;自动补全命令时候使用菜单式匹配列表&lt;br/</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">set</span> <span class="n">wildmenu</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">ruby</span><span class="p">,</span><span class="n">eruby</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">rubycomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">python</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">pythoncomplete</span><span class="c1">#Complete</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">javascript</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javascriptcomplete</span><span class="c1">#CompleteJS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">html</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">htmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">css</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">csscomplete</span><span class="c1">#CompleteCSS</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">xml</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">xmlcomplete</span><span class="c1">#CompleteTags</span>
</span><span class='line'><span class="n">autocmd</span> <span class="no">FileType</span> <span class="n">java</span> <span class="n">set</span> <span class="n">omnifunc</span><span class="o">=</span><span class="n">javacomplete</span><span class="c1">#Complet&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="s2">&quot;NERDTree可以树形显示目录,Taglist显示Tags列表</span>
</span><span class='line'><span class="s2">&quot;</span><span class="no">Ctrl</span><span class="o">+</span><span class="n">w</span><span class="err">：打开文件浏览</span> <span class="no">Ctrl</span><span class="o">+</span><span class="n">t</span><span class="err">：打开</span><span class="no">Taglist</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span> <span class="ss">:NERDTree</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">map</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">t</span><span class="o">&gt;</span> <span class="ss">:TlistToggle</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">vmap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">c</span><span class="o">&gt;</span> <span class="s2">&quot;+y&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;let Tlist_Ctags_Cmd=&#39;ctags.exe&#39;</span>
</span><span class='line'><span class="s2">let Tlist_Show_One_File = 1</span>
</span><span class='line'><span class="s2">let Tlist_Exit_OnlyWindow=1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;&quot;</span><span class="err">存放</span><span class="n">tags</span><span class="err">的目录，</span><span class="n">ctags</span> <span class="o">-</span><span class="n">R</span><span class="err">后生成的</span><span class="n">tags</span><span class="err">所在目录</span>
</span><span class='line'><span class="n">set</span> <span class="n">tags</span><span class="o">=</span><span class="n">C</span><span class="p">:\</span><span class="no">Users</span><span class="p">\</span><span class="n">lusky</span><span class="p">\</span><span class="n">quantum</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;let g:miniBufExplMapWindowNavVim = 1</span>
</span><span class='line'><span class="sr">let g:miniBufExplMapWindowNavArrows = 1</span>
</span><span class='line'><span class="sr">let g:miniBufExplMapCTabSwitchBufs = 1</span>
</span><span class='line'><span class="sr">let g:miniBufExplModSelTarget = 1&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="s2">&quot;PHP支持,不需要的话可以不要</span>
</span><span class='line'><span class="s2">inoremap &lt;C-P&gt; &lt;ESC&gt;:call PhpDocSingle()&lt;CR&gt;i</span>
</span><span class='line'><span class="s2">nnoremap &lt;C-P&gt; :call PhpDocSingle()&lt;CR&gt;</span>
</span><span class='line'><span class="s2">vnoremap &lt;C-P&gt; :call PhpDocRange()&lt;CR&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>下载更适合Python的自动补全插件</h2>

<p>下载pydiction，解压后有4个文件，拷贝python_pydiction.vim和complete-dict到ftplugin目录，修改<em>vimrc
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></em>vimrc - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&quot;Pydiction插件设置</span>
</span><span class='line'><span class="sr">let g:pydiction_location = &#39;D:\Program Files\Vim\vim73\ftplugin\complete-dict&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>最后,给一张图吧:</h2>

<p><img src="/images/2012-10/2012-10-11-setup-vim-for-python.jpg"></p>

<p>也可以到我的github博客的source分支上下载。位于<code>blog/attachments/2012-10/_vimrc</code>下载.</p>
]]></content>
  </entry>
  
</feed>
