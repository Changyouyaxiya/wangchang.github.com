<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sqlalchemy | WangChang's Blog]]></title>
  <link href="http://wangchang.github.com/blog/categories/sqlalchemy/atom.xml" rel="self"/>
  <link href="http://wangchang.github.com/"/>
  <updated>2012-12-11T14:13:18+08:00</updated>
  <id>http://wangchang.github.com/</id>
  <author>
    <name><![CDATA[Wang Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Sqlalchemy指南(一)]]></title>
    <link href="http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1/"/>
    <updated>2012-11-14T15:11:00+08:00</updated>
    <id>http://wangchang.github.com/blog/2012/11/sqlalchemy-tutorial-1</id>
    <content type="html"><![CDATA[<p>最近项目需要学习sqlalchemy，对于这个神器，网上的教程实在太少了，而且版本太老。于是只好自己慢慢读，以此系列做一个记录的吧！</p>

<blockquote><p>Sqlalchemy version:0.8.b1
使用sqlite或者mysql来练习
主要是参照官方文档，以及实际的使用经验
OS:Win7 or Ubuntu12.04</p></blockquote>

<!--more-->


<h2>Sqlalchemy的架构图</h2>

<p>关于这个架构图，文档解释如下：</p>

<blockquote><p>InSQLAlchemy ORM, the Object Relational Mapper is introduced and fully described. New users should begin with theObject Relational Tutorial.</p>

<p>InSQLAlchemy Core, the breadth of SQLAlchemy’s SQL and database integration and description services are doc-umented, the core of which is the SQL Expression language. The SQL Expression Language is a toolkit all its own, independent of the ORM package, which can be used to construct manipulable SQL expressions which can be programmatically constructed, modified, and executed, returning cursor-like result sets.</p></blockquote>

<h2>环境准备</h2>

<p>pip install 或者 'easy install'都可以</p>

<h2>概念解释</h2>

<h3>Engine Class</h3>

<p>class engine主要作用是1、管理与数据库的连接（一个连接池） 2、一个包含多个策略的连接池，这些策略用来配置从连接池中获取连接的方式。
函数create_engine(url,args)用于创建一个和数据库的engine，用于连接的URL格式为：<code>driver://username:password@host:port/database</code>有以下几个方式:</p>

<pre><code>#Create a connection to a database
engine = create_engine('sqlite://')
engine = create_engine('sqlite:///data.sqlite')
engine = create_engine('mysql://localhost/mysql_db')
</code></pre>

<p>其中，参数args是一个字典，有以下一些：</p>

<pre><code>echo=True or False
strategy
use_ansi
encoding
</code></pre>

<p>一个engine有以下方法：connect</p>

<h3>MetaData Class</h3>

<p>class metadata主要作用是，维护数据方法（mysql,sqlite等）以及表的定义。其中包含了收集管理描述表的类的功能。使用MetaData的构造器即可实例化，如果构造器中有engine或者url参数，那么这就是一个bound的MetaDate，如果没参数，就是一个unbound的MetaData。</p>

<pre><code>unbound_meta = MetaData()

db = create_engine('sqlite://')
bound_meta = MetaData(bind=db)
</code></pre>

<p>当MetaData被bind以后，就可以方便的创建表等操作了，如下：
类</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="n">metadata</span><span class="o">=</span><span class="n">MetaData</span><span class="p">()</span>
</span><span class='line'><span class="n">user_table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&#39;tf_user&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;user_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;email_address&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;password&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">40</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;first_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;last_name&#39;</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span><span class="s">&#39;created&#39;</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">user_table</span><span class="o">.</span><span class="n">create</span><span class="p">()</span><span class="c">#在数据库中创建相应的Table</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>表、列、约束</h3>

<p>Table.<strong>init</strong>(self, name, metadata,<em>args, **kwargs)
Column.<strong>init</strong>(self, name, type_, </em>args, **kwargs)</p>

<p>Primary keys</p>

<p>用primary_key=True来指定一个列的主键，例如</p>

<pre><code>Column('brand_id', Integer, ForeignKey('brand.id'),primary_key=True)
</code></pre>

<p>Foreign keys</p>

<p>Foreign keys是将一个表中的一行与另一个表中的一行进行联系，调用方式：
ForeignKey.<strong>init</strong>( self, col-umn, constraint=None, use_alter=False, name=None, onupdate=None, ondelete=None)
Column('brand_id', Integer, ForeignKey('brand.id'))</p>

<h1>#</h1>

<p>和数据库连接，需要一个engine！
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from sqlalchemy import create_engine
</span><span class='line'>engine = create_engine(’sqlite:///:memory:’, echo=True)</span></code></pre></td></tr></table></div></figure></notextile></div>
引擎的方法：
engine.execute("select 1").scalar() 直接执行sql语句。
在使用ORM中，应该有两步，一是描述我们要处理的数据库，而是将我们的类和数据库中的table关联起来。在sqlalchemy中，这两步合二为一，使用declarative机制，在这个机制中，所有需要映射的类都是根据一个维护分类和映射关系的基类来的，这个基类就是declarative base class。</p>

<p>from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base() #创建这个base类</p>
]]></content>
  </entry>
  
</feed>
